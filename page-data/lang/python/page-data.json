{
    "componentChunkName": "component---node-modules-gatsby-theme-oi-wiki-src-templates-doc-js",
    "path": "/lang/python/",
    "result": {"data":{"mdx":{"id":"6af55930-82c9-589e-a073-915d7285db21","wordCount":{"words":1223},"fields":{"slug":"/lang/python/","isIndex":false},"excerpt":"关于 Python Python 是一门已在世界上广泛使用的解释型语言。它提供了高效的高级数据结构，还能简单有效地面向对象编程，也可以在算法竞赛。 Python 的优点 Python 是一门 解释型 语言：Python…","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"关于 Python"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"关于-python"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%85%B3%E4%BA%8E-python","ariaLabel":"关于 python permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 是一门已在世界上广泛使用的解释型语言。它提供了高效的高级数据结构，还能简单有效地面向对象编程，也可以在算法竞赛。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Python 的优点"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"python-的优点"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#python-%E7%9A%84%E4%BC%98%E7%82%B9","ariaLabel":"python 的优点 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python 是一门 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"解释型"}]},{"type":"text","value":" 语言：Python 不需要编译和链接，可以在一定程度上减少操作步骤。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python 是一门 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"交互式"}]},{"type":"text","value":" 语言：Python 解释器实现了交互式操作，可以直接在终端输入并执行指令。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"易学易用"}]},{"type":"text","value":"：Python 提供了大量的数据结构，也支持开发大型程序。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"兼容性强"}]},{"type":"text","value":"：Python 同时支持 Windows、macOS 和 Unix 操作系统。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"实用性强"}]},{"type":"text","value":"：从简单的输入输出到科学计算甚至于大型 WEB 应用，都可以写出适合的 Python 程序。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"程序简洁、易读"}]},{"type":"text","value":"：Python 代码通常比实现同种功能的其他语言的代码短。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"支持拓展"}]},{"type":"text","value":"：Python 会开发 C 语言程序（即 CPython），支持把 Python 解释器和用 C 语言开发的应用链接，用 Python 扩展和控制该应用。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"学习 Python 的注意事项"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"学习-python-的注意事项"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%AD%A6%E4%B9%A0-python-%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9","ariaLabel":"学习 python 的注意事项 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"目前主要使用的 Python 版本是 Python 3.7 及以上的版本，Python 2 和 Python 3.6 及以前的 Python 3 已经 "},{"type":"element","tagName":"a","properties":{"href":"https://devguide.python.org/versions/#unsupported-versions"},"children":[{"type":"text","value":"不被支持"}]},{"type":"text","value":"，但仍被一些老旧系统与代码所使用。本文将 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"介绍较新版本的 Python"}]},{"type":"text","value":"。如果遇到 Python 2 代码，可以尝试 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/2to3.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2to3"}]}]},{"type":"text","value":" 程序将 Python 2 代码转换为 Python 3 代码。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python 的设计理念和语法结构 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"与一些其他语言的差异较大"}]},{"type":"text","value":"，隐藏了许多底层细节，所以呈现出实用而优雅的风格。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python 是高度动态的解释型语言，因此其 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"程序运行速度相对较慢"}]},{"type":"text","value":"，尤其在使用其内置的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" 循环语句时。在使用 Python 时，应尽量使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"filter"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"map"}]},{"type":"text","value":" 等内置函数，或使用 "},{"type":"element","tagName":"a","properties":{"href":"https://www.pythonforbeginners.com/basics/list-comprehensions-in-python"},"children":[{"type":"text","value":"列表生成"}]},{"type":"text","value":" 语法的手段来提高程序性能。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"环境搭建"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"环境搭建"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA","ariaLabel":"环境搭建 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Windows"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"windows"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#windows","ariaLabel":"windows permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"访问 "},{"type":"element","tagName":"a","properties":{"href":"https://www.python.org/downloads/"},"children":[{"type":"text","value":"https://www.python.org/downloads/"}]},{"type":"text","value":" 下载自己需要的版本并安装。\n为了方便，请务必勾选复选框 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Add Python 3.x to PATH"}]},{"type":"text","value":" 以将 Python 加入环境变量。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如下图，在 Python 3.7.4 版本的安装界面中，应勾选最后一项复选框。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/73b8108cbcfcbc05e2af0fd7a4f5c116/python1.png","alt":""},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"安装完成后，可以在开始菜单找到安装好的 Python。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/72358023f2a00b5f582f3f158ca6e59c/python2.png","alt":""},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此外，可以在命令提示符中运行 Python。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正常启动 Python 解释器后，它会先显示欢迎信息等内容，之后就会出现提示符 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":">>>"}]},{"type":"text","value":"，大致如下所示："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":"Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此外，也可以在 Microsoft Store 中免费而快捷地获取 Python。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"macOS/Linux"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"macoslinux"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#macoslinux","ariaLabel":"macoslinux permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"通常情况下，大部分的 Linux 发行版中已经自带了 Python。如果只打算学习 Python 语法，并无其它开发需求，不必另外安装 Python。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"details","properties":{"className":["warning"],"open":"true"},"children":[{"type":"element","tagName":"summary","properties":{},"children":[{"type":"text","value":"注意"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在一些默认安装（指使用软件包管理器安装）Python 的系统（如 Unix 系统）中，应在终端中运行 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"python3"}]},{"type":"text","value":" 打开 Python 3 解释器。"},{"type":"element","tagName":"sup","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#user-content-fn-ref1","id":"user-content-fnref-ref1","dataFootnoteRef":"","ariaDescribedBy":["footnote-label"]},"children":[{"type":"text","value":"1"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果发行版自带 Python 版本过旧，可自行下载编译最新版本的 Python。此外，也可以通过 venv、conda、Nix 等工具管理 Python 工具链和 Python 软件包，创建隔离的虚拟环境，避免出现依赖问题。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"作为一种解释型语言，Python 的执行方式和 C++ 有所不同，这种差异在使用 IDE 编程时往往得不到体现，因此这里需要强调一下运行程序的不同方式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当在命令行中键入 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"python3"}]},{"type":"text","value":" 或刚刚打开 IDLE 时，你实际进入了一种交互式的编程环境，也称「REPL」（「读取 - 求值 - 输出」循环），初学者可以在这里输入语句并立即看到结果，这让验证一些语法变得极为容易，我们也将在后文中大量使用这种形式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但若要编写完整的程序，你最好还是新建一个文本文件（通常后缀为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":".py"}]},{"type":"text","value":"），然后在命令行中执行 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"python3 filename.py"}]},{"type":"text","value":"，就能够运行代码看到结果了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"通过镜像下载安装文件"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"通过镜像下载安装文件"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E9%80%9A%E8%BF%87%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6","ariaLabel":"通过镜像下载安装文件 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"目前国内关于 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"源码"}]},{"type":"text","value":" 的镜像缓存主要是 "},{"type":"element","tagName":"a","properties":{"href":"https://mirror.bjtu.edu.cn/python/"},"children":[{"type":"text","value":"北京交通大学自由与开源软件镜像站"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"a","properties":{"href":"https://repo.huaweicloud.com/python/"},"children":[{"type":"text","value":"华为开源镜像站"}]},{"type":"text","value":"，可以到那里尝试下载 Python 安装文件。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pip"}]},{"type":"text","value":" 安装第三方库"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"使用-pip-安装第三方库"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E4%BD%BF%E7%94%A8-pip-%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93","ariaLabel":"使用 pip 安装第三方库 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 的生命力很大程度上来自于丰富的第三方库，编写一些实用程序时「调库」是常规操作，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pip"}]},{"type":"text","value":" 是首选的安装第三方库的程序。自 Python 3.4 版本起，它被默认包含在 Python 二进制安装程序中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pip"}]},{"type":"text","value":" 中的第三方库主要存储在 "},{"type":"element","tagName":"a","properties":{"href":"https://pypi.org/"},"children":[{"type":"text","value":"Python 包索引（PyPI）"}]},{"type":"text","value":" 上，用户也可以指定其它第三方库的托管平台。使用方法可参照 "},{"type":"element","tagName":"a","properties":{"href":"https://mirrors.tuna.tsinghua.edu.cn/help/pypi/"},"children":[{"type":"text","value":"pypi 镜像使用帮助 - 清华大学开源软件镜像站"}]},{"type":"text","value":"、"},{"type":"element","tagName":"a","properties":{"href":"http://mirrors.ustc.edu.cn/help/pypi.html"},"children":[{"type":"text","value":"PyPI 镜像源使用帮助—中国科学技术大学镜像站"}]},{"type":"text","value":" 等使用帮助。你可以在 "},{"type":"element","tagName":"a","properties":{"href":"https://mirrorz.org/list/pypi"},"children":[{"type":"text","value":"MirrorZ"}]},{"type":"text","value":" 上获取更多 PyPI 镜像源。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"基本语法"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"基本语法"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95","ariaLabel":"基本语法 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 的语法简洁而易懂，也有许多官方和第三方文档与教程。这里仅介绍一些对 OIer 比较实用的语言特性，你可以在 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/"},"children":[{"type":"text","value":"Python 文档"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"a","properties":{"href":"https://wiki.python.org/moin/"},"children":[{"type":"text","value":"Python Wiki"}]},{"type":"text","value":" 等网页上了解更多关于 Python 的教程。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"注释"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"注释"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E6%B3%A8%E9%87%8A","ariaLabel":"注释 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"加入注释并不会对代码的运行产生影响，但加入注释可以使代码更加易懂易用。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"加入注释代码并不会对代码产生影响。我们鼓励加入注释来使代码更加易懂易用。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"基本数据类型"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"基本数据类型"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","ariaLabel":"基本数据类型 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"一切皆对象"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"一切皆对象"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E4%B8%80%E5%88%87%E7%9A%86%E5%AF%B9%E8%B1%A1","ariaLabel":"一切皆对象 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 Python 中，你无需事先声明变量名及其类型，直接赋值即可创建各种类型的变量："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> x = -3  # 语句结尾不用加分号\n>>> x\n-3\n>>> f = 3.1415926535897932384626; f  # 实在想加分号也可以，这里节省了一行\n3.141592653589793\n>>> s1 = \"O\"\n>>> s1  # 怎么显示成单引号了？有区别吗？\n'O'\n>>> b = 'A' == 65  # 明明在 C/C++ 中是成立的\n>>> b  # 与众不同的是 True, False 首字母均大写，可能与内置常量的命名约定有关\nFalse\n>>> True + 1 == 2 and not False != 0  # Python 可能喜欢单词胜过符号\nTrue"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但这不代表 Python 没有类型的概念，实际上解释器会根据赋值或运算自动推断变量类型，你可以使用内置函数 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type()"}]},{"type":"text","value":" 查看这些变量的类型："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> type(x)\n<class 'int'>\n>>> type(f)\n<class 'float'>\n>>> type(s1)  # 请注意，不要给字符串起名为 str，不信试试看是否真的可以这么做\n<class 'str'>\n>>> type(b)\n<class 'bool'>"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"details","properties":{"className":["note"],"open":"true"},"children":[{"type":"element","tagName":"summary","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/functions.html"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"内置函数"}]}]},{"type":"text","value":" 是什么？"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 C/C++ 中，很多常用函数都分散在不同的头文件中，但 Python 的解释器内置了许多实用且通用的函数，你可以直接使用而无需注意它们的存在，但这也带来了小问题，这些内置函数的名称多为常见单词，你需要注意避免给自己的变量起相同的名字，否则可能会产生奇怪的结果。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正如我们所看到的，Python 内置有整数、浮点数、字符串和布尔类型，可以类比为 C++ 中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int"}]},{"type":"text","value":"，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"float"}]},{"type":"text","value":"，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"string"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"bool"}]},{"type":"text","value":"。但有一些明显的不同之处，比如没有 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"char"}]},{"type":"text","value":" 字符类型，也没有 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" 类型（但 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"float"}]},{"type":"text","value":" 其实对应 C 中的双精度），如果需要更精确的浮点运算，可以使用标准库中的 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/decimal.html"},"children":[{"type":"text","value":"decimal"}]},{"type":"text","value":" 模块，如果需要用到复数，Python 还内置了 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"complex"}]},{"type":"text","value":" 类型（而这也意味着最好不要给变量起名为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"complex"}]},{"type":"text","value":"）。\n可以看到这些类型都以 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" 开头，而这正是 Python 不同于 C++ 的关键之处，Python 程序中的所有数据都是由对象或对象间关系来表示的，函数是对象，类型本身也是对象："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> type(int)\n<class 'type'>\n>>> type(pow)  # 求幂次的内置函数，后文会介绍\n<class 'builtin_function_or_method'>\n>>> type(type)  # type() 也是内置函数，但有些特殊，感兴趣可自行查阅\n<class 'type'>"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"你或许会觉得这些概念一时难以理解且没有用处，所以我们暂时不再深入，在后文的示例中你或许能慢慢体会到，Python 的对象提供了强大的方法，我们在编程时应当优先考虑围绕对象而不是过程进行操作，这会让我们的代码显得更加紧凑明晰。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"数字运算"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"数字运算"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E6%95%B0%E5%AD%97%E8%BF%90%E7%AE%97","ariaLabel":"数字运算 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有人说，你可以把你系统里装的 Python 当作一个多用计算器，这是事实。"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n在交互模式下，你可以在提示符 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":">>>"}]},{"type":"text","value":" 后面输入一个表达式，就像其他大部分语言（如 C++）一样使用运算符 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"+"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"%"}]},{"type":"text","value":" 来对数字进行运算，也可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"()"}]},{"type":"text","value":" 来进行符合结合律的分组，读者可以自行试验，在这里我们仅展示与 C++ 差异较大的部分："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> 5.0 * 6  # 浮点数的运算结果是浮点数\n30.0\n>>> 15 / 3  # 与 C/C++ 不同，除法永远返回浮点 float 类型\n5.0\n>>> 5 / 100000  # 位数太多，结果显示成科学计数法形式\n5e-05\n>>> 5 // 3 # 使用整数除法（地板除）则会向下取整，输出整数类型\n1\n>>> -5 // 3 # 符合向下取整原则，注意这与 C/C++ 不同\n-2\n>>> 5 % 3 # 取模\n2\n>>> -5 % 3 # 负数取模结果一定是非负数，这点也与 C/C++ 不同，不过都满足 (a//b)*b+(a%b)==a \n1\n>>> x = abs(-1e4)  # 求绝对值的内置函数\n>>> x += 1  # 没有自增/自减运算符\n>>> x  # 科学计数法默认为 float\n10001.0"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在上面的实践中可以发现，除法运算（"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/"}]},{"type":"text","value":"）永远返回浮点类型（在 Python 2 中返回整数）。如果你想要整数或向下取整的结果的话，可以使用整数除法（"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"//"}]},{"type":"text","value":")。同样的，你也可以像 C++ 中一样，使用模（"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"%"}]},{"type":"text","value":"）来计算余数，科学计数法的形式也相同。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"特别地，Python 用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"**"}]},{"type":"text","value":" 即可进行幂运算，还通过内置的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pow(a, b, mod)"}]},{"type":"text","value":" 提供了 "},{"type":"element","tagName":"a","properties":{"href":"../math/binary-exponentiation.md"},"children":[{"type":"text","value":"快速幂"}]},{"type":"text","value":" 的高效实现。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 的字符串类型包含 Unicode 字符，这意味着任何字符串都会存储为 Unicode。"},{"type":"element","tagName":"sup","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#user-content-fn-ref2","id":"user-content-fnref-ref2","dataFootnoteRef":"","ariaDescribedBy":["footnote-label"]},"children":[{"type":"text","value":"2"}]}]},{"type":"text","value":"在 Python 中，可以对一个 Unicode 字符使用内置函数 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ord()"}]},{"type":"text","value":" 将其转换为对应的 Unicode 编码，逆向的转换使用内置函数 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"chr()"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果想把数转换为对应的字符串，可使用 Python 内置函数 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"str()"}]},{"type":"text","value":"，也可以使用 f-string 实现；反之，可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int()"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"float()"}]},{"type":"text","value":" 两个函数。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 的字符串类型还有 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/stdtypes.html#text-sequence-type-str"},"children":[{"type":"text","value":"许多方便的功能"}]},{"type":"text","value":"。由于本文篇幅有限，这里不一一介绍。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"数据类型判断"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"数据类型判断"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD","ariaLabel":"数据类型判断 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于一个变量，可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type(object)"}]},{"type":"text","value":" 返回变量的类型，例如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type(8)"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type('a')"}]},{"type":"text","value":" 的值分别为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<class 'int'>"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<class 'str'>"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"输出和输入"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"输出和输入"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E8%BE%93%E5%87%BA%E5%92%8C%E8%BE%93%E5%85%A5","ariaLabel":"输出和输入 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"输出"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"输出"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E8%BE%93%E5%87%BA","ariaLabel":"输出 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于一个变量，可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type(object)"}]},{"type":"text","value":" 返回变量的类型，例如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type(8)"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type('a')"}]},{"type":"text","value":" 的值分别为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<class 'int'>"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<class 'str'>"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 中，还可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"**"}]},{"type":"text","value":" 运算符和内置的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pow(base, exp, mod=None)"}]},{"type":"text","value":" 函数进行幂运算，使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"abs(x)"}]},{"type":"text","value":" 求数的绝对值。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> 3 ** 4 # 幂运算\n81\n>>> 2 ** 512\n13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096\n>>> pow(2, 512, int(1e4)) # 即 2**512 % 10000 的快速实现, 1e4 是 float 所以要转 int\n4096\n>>> 2048 ** 2048 # 在IDLE里试试大整数？\n>>> 0.1 + 0.1 + 0.1 - 0.3 == 0.  # 和 C/C++ 一样需要注意浮点数不能直接判相等\nFalse"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"字符串"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"字符串"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%AD%97%E7%AC%A6%E4%B8%B2","ariaLabel":"字符串 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 3 提供了强大的基于 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/howto/unicode.html#unicode-howto"},"children":[{"type":"text","value":"Unicode"}]},{"type":"text","value":" 的字符串类型，使用起来和 C++ 中的 string 类似，一些概念如转义字符也都相通，除了加号拼接和索引访问，还额外支持数乘 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" 重复字符串，和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"in"}]},{"type":"text","value":" 操作符。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> s1 = \"O\"  # 单引号和双引号都能包起字符串，有时可节省转义字符\n>>> s1 += 'I-Wiki'  # 为和 C++ 同步建议使用双引号 \n>>> 'OI' in s1  # 检测子串很方便\nTrue\n>>> len(s1)  # 类似 C++ 的 s.length()，但更通用\n7\n>>> s2 = \"\"\" 感谢你的阅读\n... 欢迎参与贡献!\n\"\"\"   # 使用三重引号的字符串可以跨越多行\n>>> s1 + s2 \n'OI-Wiki 感谢你的阅读\\n欢迎参与贡献!'\n>>> print(s1 + s2)  # 这里使用了 print() 函数打印字符串\nOI-Wiki 感谢你的阅读\n欢迎参与贡献!\n>>> s2[2] * 2 + s2[3] + s2[-1]  # 负数索引从右开始计数，加上len(s)，相当于模n的剩余类环\n'谢谢你!'\n>>> s1[0] = 'o'  # str 是不可变类型，不能原地修改，其实 += 也是创建了新的对象\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'str' object does not support item assignment"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 支持多种复合数据类型，可将不同值组合在一起。最常用的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"list"}]},{"type":"text","value":"，类型是用方括号标注、逗号分隔的一组值。例如，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[1, 2, 3]"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"['a','b','c']"}]},{"type":"text","value":" 都是列表。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"除了索引，字符串还支持"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"切片"}]},{"type":"text","value":"，它的设计非常精妙又符合直觉，格式为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"s[左闭索引:右开索引:步长]"}]},{"type":"text","value":"："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> s = 'OI-Wiki 感谢你的阅读\\n欢迎参与贡献!'\n>>> s[:8]  # 省略左闭索引则从头开始\n'OI-Wiki '\n>>> s[8:14]  # 左闭右开设计的妙处，长度恰好为14-8=6，还和上一个字符串无缝衔接\n'感谢你的阅读'\n>>> s[-4:]  # 省略右开索引则直到结尾\n'与贡献!'\n>>> s[8:14:2]  # 步长为2\n'感你阅'\n>>> s[::-1]  # 步长为 -1 时，获得了反转的字符串\n'!献贡与参迎欢\\n读阅的你谢感 ikiW-IO'\n>>> s  # 但原来的字符串并未改变\n'OI-Wiki 感谢你的阅读\\n欢迎参与贡献!'"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"C/C++ 中 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"char"}]},{"type":"text","value":" 类型可以和 对应的 ASCII 码互转，而在 Python 中你可以对一个 Unicode 字符使用内置函数 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ord()"}]},{"type":"text","value":" 将其转换为对应的 Unicode 编码，逆向的转换使用内置函数 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"chr()"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果想把数字转换成对应的字符串，可以使用内置函数 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"str()"}]},{"type":"text","value":"，反之可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int()"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"float()"}]},{"type":"text","value":"，你可以类比为 C/C++ 中的强制类型转换，但括号不是加在类型上而是作为函数的一部分括住参数。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 的字符串类型提供了许多强大的方法，包括计算某字符的索引与出现次数，转换大小写等等，这里就不一一列举，强烈建议查看 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/stdtypes.html#text-sequence-type-str"},"children":[{"type":"text","value":"官方文档"}]},{"type":"text","value":" 熟悉常用方法，遇到字符串操作应当首先考虑使用这些方法而非自力更生。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"开数组"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"开数组"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%BC%80%E6%95%B0%E7%BB%84","ariaLabel":"开数组 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"从 C++ 转过来的同学可能很迷惑怎么在 Python 中开数组，这里就介绍在 Python 开「数组」的语法，需要强调我们介绍的其实是几种 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/stdtypes.html#iterator-types"},"children":[{"type":"text","value":"序列类型"}]},{"type":"text","value":"，和 C 的数组有着本质区别，而更接近 C++ 中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"vector"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"list"}]},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"使用-list"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E4%BD%BF%E7%94%A8-list","ariaLabel":"使用 list permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"列表（"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"list"}]},{"type":"text","value":"）大概是 Python 中最常用也最强大的序列类型，列表中可以存放任意类型的元素，包括嵌套的列表，这符合数据结构中「广义表」的定义。请注意不要将其与 C++ STL 中的双向链表 "},{"type":"element","tagName":"a","properties":{"href":"https://oi-wiki.org/lang/csl/sequence-container/#list"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"list"}]}]},{"type":"text","value":" 混淆，故本文将使用「列表」而非 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"list"}]},{"type":"text","value":" 以免造成误解。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> []  # 创建空列表，注意列表使用方括号\n[]\n>>> nums = [0, 1, 2, 3, 5, 8, 13]; nums  # 初始化列表，注意整个列表可以直接打印\n[0, 1, 2, 3, 5, 8, 13]\n>>> nums[0] = 1; nums  # 支持索引访问，还支持修改元素\n[1, 1, 2, 3, 5, 8, 13]\n>>> nums.append(nums[-2]+nums[-1]); nums  # append() 同 vector 的 push_back()，也都没有返回值\n[1, 1, 2, 3, 5, 8, 13, 21]\n>>> nums.pop()  # 弹出并返回末尾元素，可以当栈使用；其实还可指定位置，默认是末尾\n21\n>>> nums.insert(0, 1); nums  # 同 vector 的 insert(position, val)\n[1, 1, 1, 2, 3, 5, 8, 13]\n>>> nums.remove(1); nums  # 按值移除元素（只删第一个出现的），若不存在则抛出错误\n[1, 1, 2, 3, 5, 8, 13]\n>>> len(nums)  # 求列表长度，类似 vector 的 size()，但 len() 是内置函数\n7\n>>> nums.reverse(); nums  # 原地逆置\n[13, 8, 5, 3, 2, 1, 1]\n>>> sorted(nums)  # 获得排序后的列表\n[1, 1, 2, 3, 5, 8, 13]\n>>> nums  # 但原来的列表并未排序\n[13, 8, 5, 3, 2, 1, 1]\n>>> nums.sort(); nums  # 原地排序，可以指定参数 key 作为排序标准\n[1, 1, 2, 3, 5, 8, 13]\n>>> nums.count(1)  # 类似 std::count()\n2\n>>> nums.index(1)  # 返回值首次出现项的索引号，若不存在则抛出错误\n0\n>>> nums.clear(); nums  # 同 vector 的 clear()"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以上示例展现了列表与 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"vector"}]},{"type":"text","value":" 的相似之处，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"vector"}]},{"type":"text","value":" 中常用的操作一般也都能在列表中找到对应方法，不过某些方法如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"len()"}]},{"type":"text","value":","},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sorted()"}]},{"type":"text","value":" 会以内置函数的面目出现，而 STL 算法中的函数如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"find()"}]},{"type":"text","value":","},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"count()"}]},{"type":"text","value":","},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"max_element()"}]},{"type":"text","value":","},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sort()"}]},{"type":"text","value":","},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reverse()"}]},{"type":"text","value":" 在 Python 中又成了对象的方法，使用时需要注意区分，更多方法请参见官方文档的 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/tutorial/datastructures.html#more-on-lists"},"children":[{"type":"text","value":"列表详解"}]},{"type":"text","value":"。下面将展示列表作为 Python 的基本序列类型的一些强大功能："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 支持多种复合数据类型，可将不同值组合在一起。最常用的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"list"}]},{"type":"text","value":"，类型是用方括号标注、逗号分隔的一组值。例如，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[1, 2, 3]"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"['a','b','c']"}]},{"type":"text","value":" 都是列表。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> lst = [1, '1'] + [\"2\", 3.0]  # 列表直接相加生成一个新列表\n>>> lst  # 这里存放不同的类型只是想说明可以这么做，但这不是好的做法\n[1, '1', '2', 3.0]\n>>> 3 in lst  # 实用的成员检测操作，字符串也有该操作且还支持子串检测\nTrue\n>>> [1, '1'] in lst  # 仅支持单个成员检测，不会发现「子序列」\nFalse\n>>> lst[1:3] = [2, 3]; lst  # 切片并赋值，原列表被修改\n[1, 2, 3, 3.0]\n>>> lst[::-1]  # 获得反转后的新列表\n[3.0, 3, 2, 1]\n>>> lst *= 2; lst  # 数乘拼接\n[1, 2, 3, 3.0, 1, 2, 3, 3.0]\n>>> del lst[4:]; lst  # 也可写 lst[4:] = []，del 语句不止可以用于删除序列中元素\n[1, 2, 3, 3.0]"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以上示例展现了列表作为序列的一些常用操作，可以看出许多操作如切片是与字符串相通的，但字符串是「不可变序列」而列表是「可变序列」，故可以通过切片灵活地修改列表。在 C/C++ 中我们往往会通过循环处理字符数组，下面将展示如何使用 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"},"children":[{"type":"text","value":"「列表推导式」"}]},{"type":"text","value":" 在字符串和列表之间转换："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> # 建立一个 [65, 70) 区间上的整数数组，range 也是一种类型，可看作左闭右开区间，第三个参数为步长可省略\n>>> nums = list(range(65,70))  # 记得 range 外面还要套一层 list()\n[65, 66, 67, 68, 69]\n>>> lst = [chr(x) for x in nums]  # 列表推导式的典型结构，[exp for var in iterable if cond]\n>>> lst  # 上两句可以合并成 [str(x) for x in range(65,70)]\n['A', 'B', 'C', 'D', 'E']\n>>> s = ''.join(lst); s # 用空字符串 '' 拼接列表中的元素生成新字符串\n'ABCDE'\n>> list(s)  # 字符串生成字符列表\n['A', 'B', 'C', 'D', 'E']\n>>> # 如果你不知道有 s.lower() 方法就可能写出下面这样新瓶装旧酒的表达式\n>>> ''.join([chr(ord(ch) - 65 + 97) for ch in s if ch >= 'A' and ch <= 'Z'])  \n'abcde'"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面演示一些在 OI 中更常见的场景，比如二维「数组」："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> vis = [[0] * 3] * 3  # 开一个3*3的全0数组\n>>> vis \n[[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n>>> vis[0][0] = 1; vis  # 怎么会把其他行也修改了？\n[[1, 0, 0], [1, 0, 0], [1, 0, 0]]\n>>> # 先来看下一维列表的赋值\n>>> a1 = [0, 0, 0]; a2 = a1; a3 = a1[:]  # 列表也可以直接被赋给新的变量\n>>> a1[0] = 1; a1  # 修改列表 a1，似乎正常\n[1, 0, 0]\n>>> a2  # 怎么 a2 也被改变了\n[1, 0, 0]\n>>> a3  # a3 没有变化\n[0, 0, 0]\n>>> id(a1) == id(a2) and id(a1) != id(a3)  # 内置函数 id() 给出对象的「标识值」，可类比为地址，地址相同说明是一个对象\nTrue\n>>> vis2 = vis[:];  # 拷贝一份二维列表看看\n>>> vis[0][1] = 2; vis  # vis 肯定还是被批量修改\n>>> [[1, 2, 0], [1, 2, 0], [1, 2, 0]]\n>>> vis2  # 但 vis2 是切片拷贝的怎么还是被改了\n>>> [[1, 2, 0], [1, 2, 0], [1, 2, 0]]\n>>> id(vis) != id(vis2)  # vis 和 vis2 确实不是一个对象啊\nTrue\n>>> # 谜底揭晓，vis2 虽然不是 vis 的引用，但其中对应行都指向相同的对象\n>>> [[id(vis[i]) == id(vis2[i]) for i in range(3)]\n[True, True, True]\n>>> # 回看二维列表自身\n>>> [id(x) for x in vis]  # 具体数字和这里不一样但三个值一定相同，说明是三个相同对象\n[139760373248192, 139760373248192, 139760373248192]"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其实我们一直隐瞒了一个重要事实，Python 中赋值只传递了引用而非创建新值，你可以创建不同类型的变量并赋给新变量，验证发现二者的标识值是相同的，只不过直到现在我们才介绍了列表这一种可变类型，而给数字、字符串这样的不可变类型赋新值时实际上创建了新的对象，故而前后两个变量互不干扰。但列表是可变类型，所以我们修改一个列表的元素时，另一个列表由于指向同一个对象所以也被修改了。创建二维数组也是类似的情况，示例中用乘法创建二维列表相当于把 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0]*3"}]},{"type":"text","value":" 这个一维列表重复了 3 遍，所以涉及其中一个列表的操作会同时影响其他两个列表。更不幸的是，在将二维列表赋给其他变量的时候，就算用切片来拷贝，也只是「浅拷贝」，其中的元素仍然指向相同的对象，解决这个问题需要使用标准库中的 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/copy.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"deepcopy"}]}]},{"type":"text","value":"，或者尽量避免整个赋值二维列表。不过还好，创建二维列表时避免创建重复的列表还是比较简单，只需使用「列表推导式」："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> vis1 = [[0] * 3 for _ in range(3)]  # 把用不到的循环计数变量设为下划线 _ 是一种惯例\n>>> # 但在 REPL 中 _ 默认指代上一个表达式输出的结果，故也可使用双下划线\n>>> vis1\n[[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n>>> [id(x) for x in vis1]  # 具体数字和这里不一样但三个值一定不同，说明是三个不同对象\n[139685508981248, 139685508981568, 139685508981184]\n>>> vis1[0][0] = 1\n[[1, 0, 0], [0, 0, 0], [0, 0, 0]]\n>>> a2[0][0] = 10  # 访问和赋值二维数组"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们未讲循环的用法就先介绍了列表推导式，这是由于 Python 是高度动态的解释型语言，因此其程序运行有大量的额外开销。尤其是 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"for 循环在 Python 中运行的奇慢无比"}]},{"type":"text","value":"。因此在使用 Python 时若想获得高性能，尽量使用使用列表推导式，或者 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"filter"}]},{"type":"text","value":","},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"map"}]},{"type":"text","value":" 等内置函数直接操作整个序列来避免循环，当然这还是要根据具体问题而定。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"使用 NumPy"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"使用-numpy"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E4%BD%BF%E7%94%A8-numpy","ariaLabel":"使用 numpy permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"details","properties":{"className":["note"],"open":"false"},"children":[{"type":"element","tagName":"summary","properties":{},"children":[{"type":"text","value":"什么是 NumPy"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://numpy.org/"},"children":[{"type":"text","value":"NumPy"}]},{"type":"text","value":" 是著名的 Python 科学计算库，提供高性能的数值及矩阵运算。在测试算法原型时可以利用 NumPy 避免手写排序、求最值等算法。NumPy 的核心数据结构是 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ndarray"}]},{"type":"text","value":"，即 n 维数组，它在内存中连续存储，是定长的。此外 NumPy 核心是用 C 编写的，运算效率很高。不过需要注意，它不是标准库的一部分，可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pip install numpy"}]},{"type":"text","value":" 安装，但不保证 OI 考场环境中可用。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面的代码将介绍如何利用 NumPy 建立多维数组并进行访问。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> import numpy as np  # 请自行搜索 import 的意义和用法\n>>> np.empty(3) # 开容量为3的空数组，注意没有初始化为0\narray([0.00000000e+000, 0.00000000e+000, 2.01191014e+180])\n>>> np.zeros((3, 3)) # 开 3*3 的数组，并初始化为0\narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n>>> a1 = np.zeros((3, 3), dtype=int) # 开3×3的整数数组\n>>> a1[0][0] = 1 # 访问和赋值\n>>> a1[0, 0] = 1 # 更友好的语法\n>>> a1.shape # 数组的形状\n(3, 3)\n\n>>> a1[:2, :2] # 取前两行、前两列构成的子阵，无拷贝\narray([[1, 0],\n       [0, 0]])\n\n>>> a1[0, 2] # 获取第 1、3 列，无拷贝\narray([[1, 0],\n       [0, 0],\n       [0, 0]])\n>>> np.max(a1) # 获取数组最大值\n1\n>>> a1.flatten() # 将数组展平\narray([1, 0, 0, 0, 0, 0, 0, 0, 0])\n\n>>> np.sort(a1, axis = 1) # 沿行方向对数组进行排序，返回排序结果\narray([[0, 0, 1],\n       [0, 0, 0],\n       [0, 0, 0]])\n>>> a1.sort(axis = 1) # 沿行方向对数组进行原地排序"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"array"}]},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"使用-array"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E4%BD%BF%E7%94%A8-array","ariaLabel":"使用 array permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/array.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"array"}]}]},{"type":"text","value":" 是 Python 标准库提供的一种高效数值数组，可以紧凑地表示基本类型值的数组，但不支持数组嵌套，也很少见到有人使用它，这里只是顺便提一下。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"若无特殊说明，后文出现「数组」一般指「列表」。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/tutorial/inputoutput.html"},"children":[{"type":"text","value":"输入输出"}]},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"输入输出"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA","ariaLabel":"输入输出 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 中的输入输出主要通过内置函数 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"input()"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"print()"}]},{"type":"text","value":" 完成，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"print()"}]},{"type":"text","value":" 的用法十分符合直觉："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> a = [1,2,3]; print(a[-1])  # 打印时默认末尾换行\n3\n>>> print(ans[0], ans[1])  # 可以输出任意多个变量，默认以空格间隔\n1 2\n>>> print(a[0], a[1], end='')  # 令 end='', 使末尾不换行\n1 2>>>\n>>> print(a[0], a[1], sep=', ')  # 令 sep=', '，改变间隔样式\n1, 2\n>>> print(str(a[0]) + ', ' + str(a[1]))  # 输出同上，但是手动拼接成一整个字符串"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"算法竞赛中通常只涉及到基本的数值和字符串输出，以上用法基本足够，只有当涉及到浮点数位数时需要用到格式化字符串输出。格式化有三种方法，第一种也是最老旧的方法是使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"printf()"}]},{"type":"text","value":" 风格的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"%"}]},{"type":"text","value":" 操作符；另一种是利用 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/string.html#formatstrings"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"format"}]},{"type":"text","value":" 函数"}]},{"type":"text","value":"，写起来比较长；第三种是 Python 3.6 新增的 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/tutorial/inputoutput.html#formatted-string-literals"},"children":[{"type":"text","value":"f-string"}]},{"type":"text","value":"，最为简洁，但不保证考场中的 Python 版本足够新。详细丰富的说明可以参考 "},{"type":"element","tagName":"a","properties":{"href":"https://www.python-course.eu/python3_formatted_output.php"},"children":[{"type":"text","value":"这个网页"}]},{"type":"text","value":"，尽管更推荐使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"format()"}]},{"type":"text","value":" 方法，但为了获得与 C 接近的体验，下面仅演示与 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"printf()"}]},{"type":"text","value":" 类似的老式方法："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> pi = 3.1415926; print('%.4f' % pi)   # 格式为 %[flags][width][.precision]type\n3.1416\n>>> '%.4f - %8f = %d' % (pi, 0.1416, 3)  # 右边多个参数用 () 括住，后面会看到其实是「元组」 \n'3.1416 - 0.141600 = 3'"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"input()"}]},{"type":"text","value":" 函数的行为接近 C++ 中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"getline()"}]},{"type":"text","value":"，即将一整行作为字符串读入，且末尾没有换行符，但在算法竞赛中，常见的输入形式是一行输入多个数值，因此就需要使用字符串的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"split()"}]},{"type":"text","value":" 方法并搭配列表推导式得到存放数值类型的列表，下面以输入 n 个数求平均值为例演示输入 n 个数得到「数组」的方法："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> s = input('请输入一串数字: '); s  # 自己调试时可以向 input() 传入字符串作为提示\n请输入一串数字: 1 2 3 4 5 6\n'1 2 3 4 5 6'\n>>> a = s.split(); a\n['1', '2', '3', '4', '5', '6']\n>>> a = [int(x) for x in a]; a\n[1, 2, 3, 4, 5, 6]\n>>> # 以上输入过程可写成一行 a = [int(x) for x in input().split()]\n>>> sum(a) / len(a)  # sum() 是内置函数\n3.5"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有时题目会在每行输入固定几个数，比如边的起点、终点、权重，如果只用上面提到的方法就只能每次读入数组然后根据下标赋值，这时可以使用 Python 的「拆包」特性一次赋值多个变量："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> u, v, w = [int(x) for x in input().split()]\n1 2 4\n>>> print(u,v,w)\n1 2 4"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"题目中经常遇到输入 N 行的情况，可我们还没有讲最基本的循环语句，但 Python 强大的序列操作能在不使用循环的情况下应对多行输入，下面假设将各条边的起点、终点、权值分别读入三个数组："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> N = 4; mat = [[int(x) for x in input().split()] for i in range(N)]\n1 3 3 \n1 4 1 \n2 3 4 \n3 4 1 \n>>> mat  # 先按行读入二维数组\n[[1, 3, 3], [1, 4, 1], [2, 3, 4], [3, 4, 1]]\n>>> u, v, w = map(list, zip(*mat))   \n# *将 mat 解包得到里层的多个列表\n# zip() 将多个列表中对应元素聚合成元组，得到一个迭代器\n# map(list, iterable) 将序列中的元素（这里为元组）转成列表\n>>> print(u, v, w)  # 直接将 map() 得到的迭代器拆包，分别赋值给 u, v, w\n[1, 1, 2, 3] [3, 4, 3, 4] [3, 1, 4, 1]"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上述程序实际上相当于先读入一个 N 行 3 列的矩阵，然后将其转置成 3 行 N 列的矩阵，也就是外层列表中嵌套了 3 个列表，最后将代表这起点、终点、权值的 3 个列表分别赋值给 u, v, w。内置函数 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/functions.html#zip"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"zip()"}]}]},{"type":"text","value":" 可以将多个等长序列中的对应元素拼接在「元组」内，得到新序列。而 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"map()"}]},{"type":"text","value":" 其实是函数式编程的一种操作，它将一个给定函数作用于 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"zip()"}]},{"type":"text","value":" 所产生序列的元素，这里就是用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"list()"}]},{"type":"text","value":" 将元组变成列表。你可以自行练习使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/functions.html#zip"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"zip()"}]}]},{"type":"text","value":"，"},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/functions.html#map"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"map()"}]}]},{"type":"text","value":" 以理解其含义。需要注意的是 Python 3 中 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"zip()"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"map()"}]},{"type":"text","value":" 创建的不再返回列表而是返回迭代器，这里暂不解释它们之间的异同，你可以认为迭代器可以产生列表中的各个元素，用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"list()"}]},{"type":"text","value":" 套住迭代器就能生成列表。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/tutorial/controlflow.html"},"children":[{"type":"text","value":"控制流程"}]},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"控制流程"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B","ariaLabel":"控制流程 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"尽管我们已经学习了 Python 的许多特性，但到目前为止我们展示的 Python 代码都是单行语句，这掩盖了 Python 和 C 在代码风格上的重大差异：首先，Python 中不用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}]},{"type":"text","value":" 而是用缩进表示块结构，如果缩进没有对齐会直接报错，如果 tab 和 空格混用也会报错；其次，块结构开始的地方比如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" 语句的行末要有冒号 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":":"}]},{"type":"text","value":"。这有助于代码的可读性，但你也可能怀念 C 那种自由的体验，毕竟如果复制粘贴时因为丢失缩进而不得不手动对齐是很恼人的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"循环结构"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"循环结构"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84","ariaLabel":"循环结构 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"列表推导式能在一行内高效地完成批量操作，但有时为了压行我们已经显得过分刻意，许多场景下还是只能使用循环结构，所以我们再以读入多行数据为例展示 Python 中的循环是如何编写的："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要注意，Python 中的 for 循环和 C/C++ 有较大的差别，其作用类似 C++ 11 引入的 "},{"type":"element","tagName":"a","properties":{"href":"https://oi-wiki.org/lang/new/#for"},"children":[{"type":"text","value":"「基于范围的循环」"}]},{"type":"text","value":"，实质是迭代序列中的元素，比如编写循环遍历数组下标需要迭代 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"range(len(lst))"}]},{"type":"text","value":"，而非真正定义起始和终止条件，所以使用起来并没有 C/C++ 灵活。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面再用 while 循环展示行数不定的情况下如何输入："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"选择结构"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"选择结构"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84","ariaLabel":"选择结构 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"和 C/C++ 大同小异，一些形式上的差别都在下面的示例中有所展示，此外还需注意条件表达式中不允许使用赋值运算符（Python 3.8 以上可用 "},{"type":"element","tagName":"a","properties":{"href":"https://www.python.org/dev/peps/pep-0572/"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":":="}]}]},{"type":"text","value":"），以及 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python"},"children":[{"type":"text","value":"没有 swicth 语句"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"异常处理"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"异常处理"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86","ariaLabel":"异常处理 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"尽管 C++ 中有 "},{"type":"element","tagName":"a","properties":{"href":"https://zh.cppreference.com/w/cpp/language/try_catch"},"children":[{"type":"text","value":"try 块"}]},{"type":"text","value":" 用于异常处理，但竞赛中一般从不使用，而 Python 中常见的是 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/glossary.html#term-eafp"},"children":[{"type":"text","value":"EAFP"}]},{"type":"text","value":" 风格，故而代码中可能大量使用 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/reference/compound_stmts.html#the-try-statement"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"try-except"}]}]},{"type":"text","value":" 语句，在后文介绍 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"dict"}]},{"type":"text","value":" 这一结构时还会用到，这里展示："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/reference/compound_stmts.html#the-with-statement"},"children":[{"type":"text","value":"文件读写"}]},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"文件读写"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99","ariaLabel":"文件读写 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 内置函数 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/functions.html#open"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"open()"}]}]},{"type":"text","value":" 用于文件读写，为了防止读写过程中出错导致文件未被正常关闭，这里只介绍使用 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/reference/compound_stmts.html#the-with-statement"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"with"}]}]},{"type":"text","value":" 语句的安全读写方法："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"关于文件读写的函数有很多，分别适用于不同的场景，由于 OI 赛事尚不支持使用 Python，这里从略。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"内置容器"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"内置容器"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%86%85%E7%BD%AE%E5%AE%B9%E5%99%A8","ariaLabel":"内置容器 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 内置了许多强大的容器类型，只有熟练使用并了解其特点才能真正让 Python 在算法竞赛中有用武之地，除了上面详细介绍的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"list"}]},{"type":"text","value":"（列表），还有 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"tuple"}]},{"type":"text","value":"（元组）、"},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/stdtypes.html#mapping-types-dict"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"dict"}]}]},{"type":"text","value":"（字典）和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"set"}]},{"type":"text","value":"（集合）这几种类型。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"元组可以简单理解成不可变的列表，不过还需注意「不可变」的内涵，如果元组中的某元素是可变类型比如列表，那么仍可以修改该列表的值，元组中存放的是对列表的引用所以元组本身并没有改变。元组的优点是开销较小且「"},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/glossary.html"},"children":[{"type":"text","value":"可哈希"}]},{"type":"text","value":"」，后者在创建字典和集合时非常有用。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"字典就像 C++ STL 中的 "},{"type":"element","tagName":"a","properties":{"href":"https://oi-wiki.org/lang/csl/associative-container/#map"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"map"}]}]},{"type":"text","value":"（请注意和 Python 中内置函数 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/library/functions.html#map"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"map()"}]}]},{"type":"text","value":" 区分）用于存储键值对，形式类似 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/json.html"},"children":[{"type":"text","value":"JSON"}]},{"type":"text","value":"，但 JSON 中键必须是字符串且以双引号括住，字典则更加灵活强大，可哈希的对象都可作为字典的键。需要注意 Python 几次版本更新后字典的特性有了较多变化，包括其中元素的顺序等，请自行探索。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"集合就像 C++ STL 中的*"},{"type":"element","tagName":"a","properties":{"href":"https://oi-wiki.org/lang/csl/associative-container/#set"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"set"}]}]},{"type":"text","value":"*，不会保存重复的元素，可以看成只保存键的字典。需要注意集合和字典都用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}]},{"type":"text","value":" 括住，不过单用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}]},{"type":"text","value":" 会创建空字典而不是空集合，这里就不再给出示例。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"编写函数"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"编写函数"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E7%BC%96%E5%86%99%E5%87%BD%E6%95%B0","ariaLabel":"编写函数 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 中定义函数无需指定参数类型和返回值类型，无形中为 OI 选手减少了代码量"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"默认参数"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"默认参数"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0","ariaLabel":"默认参数 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 中函数的参数非常灵活，有关键字参数、可变参数等，但在算法竞赛中这些特性的用处并不是很大，这里只介绍一下默认参数，因为 C++ 中也有默认参数，且在 Python 中使用默认参数很有可能遇到坑。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"类型标注"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"类型标注"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E7%B1%BB%E5%9E%8B%E6%A0%87%E6%B3%A8","ariaLabel":"类型标注 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 是一个动态类型检查的语言，以灵活但隐式的方式处理类型，Python 解释器仅仅在运行时检查类型是否正确，并且允许在运行时改变变量类型，俗话说「动态类型一时爽，代码重构火葬场」，程序中的一些错误可能在运行时才会暴露："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> if False:\n...     1 + \"two\"  # This line never runs, so no TypeError is raised\n... else:\n...     1 + 2\n...\n3\n\n>>> 1 + \"two\"  # Now this is type checked, and a TypeError is raised\nTypeError: unsupported operand type(s) for +: 'int' and 'str'"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 3.5 后引入了类型标注，允许设置函数参数和返回值的类型，但只是作为提示，并没有实际的限制作用，需要静态检查工具才能排除这类错误（例如 "},{"type":"element","tagName":"a","properties":{"href":"https://www.jetbrains.com/pycharm/"},"children":[{"type":"text","value":"PyCharm"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"a","properties":{"href":"http://mypy-lang.org/"},"children":[{"type":"text","value":"Mypy"}]},{"type":"text","value":"），所以显得有些鸡肋，对于 OIer 来说更是只需了解，可按如下方式对函数的参数和返回值设置类型标注："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"除了函数参数，变量也是可以类型标注的，你可以通过调用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"__annotations__"}]},{"type":"text","value":" 来查看函数中所有的类型标注。变量类型标注赋予了 Python 静态语言的性质，即声明与赋值分离："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"pycon"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-pycon"]},"children":[{"type":"text","value":">>> nothing: str\n>>> nothing\nNameError: name 'nothing' is not defined\n\n>>> __annotations__\n{'nothing': <class 'str'>}"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"装饰器"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"装饰器"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E8%A3%85%E9%A5%B0%E5%99%A8","ariaLabel":"装饰器 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"装饰器是一个函数，接受一个函数或方法作为其唯一的参数，并返回一个新函数或方法，其中整合了修饰后的函数或方法，并附带了一些额外的功能。简而言之，可以在不修改函数代码的情况下，增加函数的功能。相关知识可以参考 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/glossary.html#term-decorator"},"children":[{"type":"text","value":"官方文档"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"部分装饰器在竞赛中非常实用，比如 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/functools.html#functools.lru_cache"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"lru_cache"}]}]},{"type":"text","value":"，可以为函数自动增加记忆化的能力，在递归算法中非常实用："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@lru_cache(maxsize=128,typed=False)"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"传入的参数有 2 个："},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"maxsize"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"typed"}]},{"type":"text","value":"，如果不传则 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"maxsize"}]},{"type":"text","value":" 的默认值为 128，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"typed"}]},{"type":"text","value":" 的默认值为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"False"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"其中 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"maxsize"}]},{"type":"text","value":" 参数表示的是 LRU 缓存的容量，即被装饰的方法的最大可缓存结果的数量。如果该参数值为 128，则表示被装饰方法最多可缓存 128 个返回结果；如果 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"maxsize"}]},{"type":"text","value":" 传入为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"None"}]},{"type":"text","value":" 则表示可以缓存无限个结果。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"typed"}]},{"type":"text","value":" 设置为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"，不同类型的函数参数将被分别缓存，例如，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(3)"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(3.0)"}]},{"type":"text","value":" 会缓存两次。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以下是使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"lru_cache"}]},{"type":"text","value":" 优化计算斐波那契数列的例子："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"常用内置库"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"常用内置库"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%B8%B8%E7%94%A8%E5%86%85%E7%BD%AE%E5%BA%93","ariaLabel":"常用内置库 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在这里介绍一些写算法可能用得到的内置库，具体用法可以自行搜索或者阅读 "},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/index.html"},"children":[{"type":"text","value":"官方文档"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"element","tagName":"thead","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"th","properties":{},"children":[{"type":"text","value":"库名"}]},{"type":"element","tagName":"th","properties":{},"children":[{"type":"text","value":"用途"}]}]}]},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/array.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"array"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"定长数组"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/argparse.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"argparse"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"命令行参数处理"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/bisect.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"bisect"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"二分查找"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/collections.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"collections"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"有序字典、双端队列等数据结构"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/fractions.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fractions"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"有理数"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/heapq.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"heapq"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"基于堆的优先级队列"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/io.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"io"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"文件流、内存流"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/itertools.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"itertools"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"迭代器"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/math.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"math"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"数学函数"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/os.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"os.path"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"系统路径等"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/random.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"random"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"随机数"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/re.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"re"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"正则表达式"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/struct.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"struct"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"转换结构体和二进制数据"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/3/library/sys.html"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sys"}]}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"系统信息"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"从例题对比 C++ 与 Python"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"从例题对比-c-与-python"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E4%BB%8E%E4%BE%8B%E9%A2%98%E5%AF%B9%E6%AF%94-c-%E4%B8%8E-python","ariaLabel":"从例题对比 c 与 python permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"details","properties":{"className":["note"],"open":"false"},"children":[{"type":"element","tagName":"summary","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.luogu.com.cn/problem/P4779"},"children":[{"type":"text","value":"例题 洛谷 P4779 【模板】单源最短路径（标准版）"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"给定一个 "},{"type":"element","tagName":"span","properties":{"className":["math","math-inline"]},"children":[{"type":"element","tagName":"mjx-container","properties":{"className":["MathJax"],"jax":"CHTML"},"children":[{"type":"element","tagName":"mjx-math","properties":{"className":["MJX-TEX"]},"children":[{"type":"element","tagName":"mjx-mi","properties":{"className":["mjx-i"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c1D45B","TEX-I"]},"children":[]}]},{"type":"element","tagName":"mjx-mo","properties":{"className":["mjx-n"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c28"]},"children":[]}]},{"type":"element","tagName":"mjx-mn","properties":{"className":["mjx-n"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c31"]},"children":[]}]},{"type":"element","tagName":"mjx-mo","properties":{"className":["mjx-n"],"space":"4"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c2264"]},"children":[]}]},{"type":"element","tagName":"mjx-mi","properties":{"className":["mjx-i"],"space":"4"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c1D45B","TEX-I"]},"children":[]}]},{"type":"element","tagName":"mjx-mo","properties":{"className":["mjx-n"],"space":"4"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c2264"]},"children":[]}]},{"type":"element","tagName":"mjx-msup","properties":{"space":"4"},"children":[{"type":"element","tagName":"mjx-mn","properties":{"className":["mjx-n"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c31"]},"children":[]},{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c30"]},"children":[]}]},{"type":"element","tagName":"mjx-script","properties":{"style":"vertical-align: 0.393em;"},"children":[{"type":"element","tagName":"mjx-mn","properties":{"className":["mjx-n"],"size":"s"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c35"]},"children":[]}]}]}]},{"type":"element","tagName":"mjx-mo","properties":{"className":["mjx-n"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c29"]},"children":[]}]}]}]}]},{"type":"text","value":" 个点、"},{"type":"element","tagName":"span","properties":{"className":["math","math-inline"]},"children":[{"type":"element","tagName":"mjx-container","properties":{"className":["MathJax"],"jax":"CHTML"},"children":[{"type":"element","tagName":"mjx-math","properties":{"className":["MJX-TEX"]},"children":[{"type":"element","tagName":"mjx-mi","properties":{"className":["mjx-i"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c1D45A","TEX-I"]},"children":[]}]},{"type":"element","tagName":"mjx-mo","properties":{"className":["mjx-n"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c28"]},"children":[]}]},{"type":"element","tagName":"mjx-mn","properties":{"className":["mjx-n"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c31"]},"children":[]}]},{"type":"element","tagName":"mjx-mo","properties":{"className":["mjx-n"],"space":"4"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c2264"]},"children":[]}]},{"type":"element","tagName":"mjx-mi","properties":{"className":["mjx-i"],"space":"4"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c1D45A","TEX-I"]},"children":[]}]},{"type":"element","tagName":"mjx-mo","properties":{"className":["mjx-n"],"space":"4"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c2264"]},"children":[]}]},{"type":"element","tagName":"mjx-mn","properties":{"className":["mjx-n"],"space":"4"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c32"]},"children":[]}]},{"type":"element","tagName":"mjx-mo","properties":{"className":["mjx-n"],"space":"3"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-cD7"]},"children":[]}]},{"type":"element","tagName":"mjx-msup","properties":{"space":"3"},"children":[{"type":"element","tagName":"mjx-mn","properties":{"className":["mjx-n"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c31"]},"children":[]},{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c30"]},"children":[]}]},{"type":"element","tagName":"mjx-script","properties":{"style":"vertical-align: 0.393em;"},"children":[{"type":"element","tagName":"mjx-mn","properties":{"className":["mjx-n"],"size":"s"},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c35"]},"children":[]}]}]}]},{"type":"element","tagName":"mjx-mo","properties":{"className":["mjx-n"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c29"]},"children":[]}]}]}]}]},{"type":"text","value":" 条有向边的带非负权图，请你计算从 "},{"type":"element","tagName":"span","properties":{"className":["math","math-inline"]},"children":[{"type":"element","tagName":"mjx-container","properties":{"className":["MathJax"],"jax":"CHTML"},"children":[{"type":"element","tagName":"mjx-math","properties":{"className":["MJX-TEX"]},"children":[{"type":"element","tagName":"mjx-mi","properties":{"className":["mjx-i"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c1D460","TEX-I"]},"children":[]}]}]}]}]},{"type":"text","value":" 出发，到每个点的距离。数据保证能从 "},{"type":"element","tagName":"span","properties":{"className":["math","math-inline"]},"children":[{"type":"element","tagName":"mjx-container","properties":{"className":["MathJax"],"jax":"CHTML"},"children":[{"type":"element","tagName":"mjx-math","properties":{"className":["MJX-TEX"]},"children":[{"type":"element","tagName":"mjx-mi","properties":{"className":["mjx-i"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c1D460","TEX-I"]},"children":[]}]}]}]}]},{"type":"text","value":" 出发到任意点。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"声明常量"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"声明常量"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%A3%B0%E6%98%8E%E5%B8%B8%E9%87%8F","ariaLabel":"声明常量 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"C++\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 5, M = 2e5 + 5;\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"Python\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```python\ntry: # 引入优先队列模块\n    import Queue as pq #python version < 3.0\nexcept ImportError:\n    import queue as pq #python3.*\n\nN = int(1e5 + 5)\nM = int(2e5 + 5)\nINF = 0x3f3f3f3f\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"声明前向星结构体和其它变量"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"声明前向星结构体和其它变量"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%A3%B0%E6%98%8E%E5%89%8D%E5%90%91%E6%98%9F%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E5%85%B6%E5%AE%83%E5%8F%98%E9%87%8F","ariaLabel":"声明前向星结构体和其它变量 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"C++\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```cpp\nstruct qxx {\n  int nex, t, v;\n};\n\nqxx e[M];\nint h[N], cnt;\n\nvoid add_path(int f, int t, int v) { e[++cnt] = (qxx){h[f], t, v}, h[f] = cnt; }\n\ntypedef pair<int, int> pii;\npriority_queue<pii, vector<pii>, greater<pii>> q;\nint dist[N];\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"Python\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```python\nclass qxx:  # 前向星类（结构体）\n    def __init__(self):\n        self.nex = 0\n        self.t = 0\n        self.v = 0\n\ne = [qxx() for i in range(M)]  # 链表\nh = [0 for i in range(N)]\ncnt = 0\n\ndist = [INF for i in range(N)]\nq = pq.PriorityQueue()  # 定义优先队列，默认第一元小根堆\n\ndef add_path(f, t, v):  # 在前向星中加边\n    # 如果要修改全局变量，要使用 global 来声明\n    global cnt, e, h\n    # 调试时的输出语句，多个变量使用元组\n    # print(\"add_path(%d,%d,%d)\" % (f,t,v))\n    cnt += 1\n    e[cnt].nex = h[f]\n    e[cnt].t = t\n    e[cnt].v = v\n    h[f] = cnt\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Dijkstra 算法"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"dijkstra-算法"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#dijkstra-%E7%AE%97%E6%B3%95","ariaLabel":"dijkstra 算法 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"C++\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```cpp\nvoid dijkstra(int s) {\n  memset(dist, 0x3f, sizeof(dist));\n  dist[s] = 0, q.push(make_pair(0, s));\n  while (q.size()) {\n    pii u = q.top();\n    q.pop();\n    if (dist[u.second] < u.first) continue;\n    for (int i = h[u.second]; i; i = e[i].nex) {\n      const int &v = e[i].t, &w = e[i].v;\n      if (dist[v] <= dist[u.second] + w) continue;\n      dist[v] = dist[u.second] + w;\n      q.push(make_pair(dist[v], v));\n    }\n  }\n}\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"Python\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```python\ndef nextedgeid(u):  # 生成器，可以用在 for 循环里\n    i = h[u]\n    while i:\n        yield i\n        i = e[i].nex\n\n\ndef dijkstra(s):\n    dist[s] = 0\n    q.put((0, s))\n    while not q.empty():\n        u = q.get()  # get 函数会顺便删除堆中对应的元素\n        if dist[u[1]] < u[0]:\n            continue\n        for i in nextedgeid(u[1]):\n            v = e[i].t\n            w = e[i].v\n            if dist[v] <= dist[u[1]]+w:\n                continue\n            dist[v] = dist[u[1]]+w\n            q.put((dist[v], v))\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"主函数"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"主函数"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E4%B8%BB%E5%87%BD%E6%95%B0","ariaLabel":"主函数 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"C++\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```cpp\nint n, m, s;\n\nint main() {\n  scanf(\"%d%d%d\", &n, &m, &s);\n  for (int i = 1; i <= m; i++) {\n    int u, v, w;\n    scanf(\"%d%d%d\", &u, &v, &w);\n    add_path(u, v, w);\n  }\n  dijkstra(s);\n  for (int i = 1; i <= n; i++) printf(\"%d \", dist[i]);\n  return 0;\n}\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"Python\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```python\nif __name__ == '__main__':\n    # 一行读入多个整数。注意它会把整行都读进来\n    n, m, s = map(int, input().split())\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        add_path(u, v, w)\n\n    dijkstra(s)\n\n    for i in range(1, n + 1):\n        print(dist[i], end = ' ')\n\n    print()\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"完整代码"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"完整代码"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81","ariaLabel":"完整代码 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"C++\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 5, M = 2e5 + 5;\n\nstruct qxx {\n  int nex, t, v;\n};\n\nqxx e[M];\nint h[N], cnt;\n\nvoid add_path(int f, int t, int v) { e[++cnt] = (qxx){h[f], t, v}, h[f] = cnt; }\n\ntypedef pair<int, int> pii;\npriority_queue<pii, vector<pii>, greater<pii>> q;\nint dist[N];\n\nvoid dijkstra(int s) {\n  memset(dist, 0x3f, sizeof(dist));\n  dist[s] = 0, q.push(make_pair(0, s));\n  while (q.size()) {\n    pii u = q.top();\n    q.pop();\n    if (dist[u.second] < u.first) continue;\n    for (int i = h[u.second]; i; i = e[i].nex) {\n      const int &v = e[i].t, &w = e[i].v;\n      if (dist[v] <= dist[u.second] + w) continue;\n      dist[v] = dist[u.second] + w;\n      q.push(make_pair(dist[v], v));\n    }\n  }\n}\n\nint n, m, s;\n\nint main() {\n  scanf(\"%d%d%d\", &n, &m, &s);\n  for (int i = 1; i <= m; i++) {\n    int u, v, w;\n    scanf(\"%d%d%d\", &u, &v, &w);\n    add_path(u, v, w);\n  }\n  dijkstra(s);\n  for (int i = 1; i <= n; i++) printf(\"%d \", dist[i]);\n  return 0;\n}\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"=== \"Python\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"null"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-null"]},"children":[{"type":"text","value":"```python\ntry:  # 引入优先队列模块\n    import Queue as pq  # python version < 3.0\nexcept ImportError:\n    import queue as pq  # python3.*\n\nN = int(1e5+5)\nM = int(2e5+5)\nINF = 0x3f3f3f3f\n\nclass qxx:  # 前向星类（结构体）\n    def __init__(self):\n        self.nex = 0\n        self.t = 0\n        self.v = 0\n\ne = [qxx() for i in range(M)]  # 链表\nh = [0 for i in range(N)]\ncnt = 0\n\ndist = [INF for i in range(N)]\nq = pq.PriorityQueue()  # 定义优先队列，默认第一元小根堆\n\ndef add_path(f, t, v):  # 在前向星中加边\n    # 如果要修改全局变量，要使用 global 来声名\n    global cnt, e, h\n    # 调试时的输出语句，多个变量使用元组\n    # print(\"add_path(%d,%d,%d)\" % (f,t,v))\n    cnt += 1\n    e[cnt].nex = h[f]\n    e[cnt].t = t\n    e[cnt].v = v\n    h[f] = cnt\n\ndef nextedgeid(u):  # 生成器，可以用在 for 循环里\n    i = h[u]\n    while i:\n        yield i\n        i = e[i].nex\n\ndef dijkstra(s):\n    dist[s] = 0\n    q.put((0, s))\n    while not q.empty():\n        u = q.get()\n        if dist[u[1]] < u[0]:\n            continue\n        for i in nextedgeid(u[1]):\n            v = e[i].t\n            w = e[i].v\n            if dist[v] <= dist[u[1]]+w:\n                continue\n            dist[v] = dist[u[1]]+w\n            q.put((dist[v], v))\n\n\n# 如果你直接运行这个python代码（不是模块调用什么的）就执行命令\nif __name__ == '__main__':\n    # 一行读入多个整数。注意它会把整行都读进来\n    n, m, s = map(int, input().split())\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        add_path(u, v, w)\n\n    dijkstra(s)\n\n    for i in range(1, n + 1):\n        # 两种输出语法都是可以用的\n        print(\"{}\".format(dist[i]), end=' ')\n        # print(\"%d\" % dist[i],end=' ')\n\n    print()  # 结尾换行\n```"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"参考文档"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"参考文档"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3","ariaLabel":"参考文档 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python Documentation，"},{"type":"element","tagName":"a","properties":{"href":"https://www.python.org/doc/"},"children":[{"type":"text","value":"https://www.python.org/doc/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Python 官方中文教程，"},{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/tutorial/"},"children":[{"type":"text","value":"https://docs.python.org/zh-cn/3/tutorial/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Learn Python3 In Y Minutes，"},{"type":"element","tagName":"a","properties":{"href":"https://learnxinyminutes.com/docs/python3/"},"children":[{"type":"text","value":"https://learnxinyminutes.com/docs/python3/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Real Python Tutorials，"},{"type":"element","tagName":"a","properties":{"href":"https://realpython.com/"},"children":[{"type":"text","value":"https://realpython.com/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"廖雪峰的 Python 教程，"},{"type":"element","tagName":"a","properties":{"href":"https://www.liaoxuefeng.com/wiki/1016959663602400/"},"children":[{"type":"text","value":"https://www.liaoxuefeng.com/wiki/1016959663602400/"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"GeeksforGeeks: Python Tutorials,"},{"type":"element","tagName":"a","properties":{"href":"https://www.geeksforgeeks.org/python-programming-language/"},"children":[{"type":"text","value":"https://www.geeksforgeeks.org/python-programming-language/"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"参考资料和注释"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"参考资料和注释"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99%E5%92%8C%E6%B3%A8%E9%87%8A","ariaLabel":"参考资料和注释 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":".anchorLink.before{position:absolute;top:0;left:0;transform:translateX(-100%);padding-right:4px}.anchorLink.after{display:inline-block;padding-left:4px}h1 .anchorLink svg,h2 .anchorLink svg,h3 .anchorLink svg,h4 .anchorLink svg,h5 .anchorLink svg,h6 .anchorLink svg{visibility:hidden}h1 .anchorLink:focus svg,h1:hover .anchorLink svg,h2 .anchorLink:focus svg,h2:hover .anchorLink svg,h3 .anchorLink:focus svg,h3:hover .anchorLink svg,h4 .anchorLink:focus svg,h4:hover .anchorLink svg,h5 .anchorLink:focus svg,h5:hover .anchorLink svg,h6 .anchorLink:focus svg,h6:hover .anchorLink svg{visibility:visible}a.anchor{display:inline-block;position:relative;top:-159px;visibility:hidden}@media only screen and (max-width:1279.95px){a.anchor{top:-101px}}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"section","properties":{"dataFootnotes":"","className":["footnotes"]},"children":[{"type":"element","tagName":"h2","properties":{"className":["sr-only"],"id":"footnote-label"},"children":[{"type":"text","value":"Footnotes"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"user-content-fn-ref1"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/tutorial/interpreter.html#id1"},"children":[{"type":"text","value":"2. Python 解释器—Python 3 文档"}]},{"type":"text","value":" "},{"type":"element","tagName":"a","properties":{"href":"#user-content-fnref-ref1","dataFootnoteBackref":"","className":["data-footnote-backref"],"ariaLabel":"Back to content"},"children":[{"type":"text","value":"↩"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"user-content-fn-ref2"},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://docs.python.org/zh-cn/3/howto/unicode.html#the-string-type"},"children":[{"type":"text","value":"Unicode 指南—Python 3 文档"}]},{"type":"text","value":" "},{"type":"element","tagName":"a","properties":{"href":"#user-content-fnref-ref2","dataFootnoteBackref":"","className":["data-footnote-backref"],"ariaLabel":"Back to content"},"children":[{"type":"text","value":"↩"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":"\nmjx-container[jax=\"CHTML\"] {\n  line-height: 0;\n}\n\nmjx-container [space=\"1\"] {\n  margin-left: .111em;\n}\n\nmjx-container [space=\"2\"] {\n  margin-left: .167em;\n}\n\nmjx-container [space=\"3\"] {\n  margin-left: .222em;\n}\n\nmjx-container [space=\"4\"] {\n  margin-left: .278em;\n}\n\nmjx-container [space=\"5\"] {\n  margin-left: .333em;\n}\n\nmjx-container [rspace=\"1\"] {\n  margin-right: .111em;\n}\n\nmjx-container [rspace=\"2\"] {\n  margin-right: .167em;\n}\n\nmjx-container [rspace=\"3\"] {\n  margin-right: .222em;\n}\n\nmjx-container [rspace=\"4\"] {\n  margin-right: .278em;\n}\n\nmjx-container [rspace=\"5\"] {\n  margin-right: .333em;\n}\n\nmjx-container [size=\"s\"] {\n  font-size: 70.7%;\n}\n\nmjx-container [size=\"ss\"] {\n  font-size: 50%;\n}\n\nmjx-container [size=\"Tn\"] {\n  font-size: 60%;\n}\n\nmjx-container [size=\"sm\"] {\n  font-size: 85%;\n}\n\nmjx-container [size=\"lg\"] {\n  font-size: 120%;\n}\n\nmjx-container [size=\"Lg\"] {\n  font-size: 144%;\n}\n\nmjx-container [size=\"LG\"] {\n  font-size: 173%;\n}\n\nmjx-container [size=\"hg\"] {\n  font-size: 207%;\n}\n\nmjx-container [size=\"HG\"] {\n  font-size: 249%;\n}\n\nmjx-container [width=\"full\"] {\n  width: 100%;\n}\n\nmjx-box {\n  display: inline-block;\n}\n\nmjx-block {\n  display: block;\n}\n\nmjx-itable {\n  display: inline-table;\n}\n\nmjx-row {\n  display: table-row;\n}\n\nmjx-row > * {\n  display: table-cell;\n}\n\nmjx-mtext {\n  display: inline-block;\n}\n\nmjx-mstyle {\n  display: inline-block;\n}\n\nmjx-merror {\n  display: inline-block;\n  color: red;\n  background-color: yellow;\n}\n\nmjx-mphantom {\n  visibility: hidden;\n}\n\n_::-webkit-full-page-media, _:future, :root mjx-container {\n  will-change: opacity;\n}\n\nmjx-math {\n  display: inline-block;\n  text-align: left;\n  line-height: 0;\n  text-indent: 0;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 100%;\n  font-size-adjust: none;\n  letter-spacing: normal;\n  border-collapse: collapse;\n  word-wrap: normal;\n  word-spacing: normal;\n  white-space: nowrap;\n  direction: ltr;\n  padding: 1px 0;\n}\n\nmjx-container[jax=\"CHTML\"][display=\"true\"] {\n  display: block;\n  text-align: center;\n  margin: 1em 0;\n}\n\nmjx-container[jax=\"CHTML\"][display=\"true\"][width=\"full\"] {\n  display: flex;\n}\n\nmjx-container[jax=\"CHTML\"][display=\"true\"] mjx-math {\n  padding: 0;\n}\n\nmjx-container[jax=\"CHTML\"][justify=\"left\"] {\n  text-align: left;\n}\n\nmjx-container[jax=\"CHTML\"][justify=\"right\"] {\n  text-align: right;\n}\n\nmjx-mi {\n  display: inline-block;\n  text-align: left;\n}\n\nmjx-c {\n  display: inline-block;\n}\n\nmjx-utext {\n  display: inline-block;\n  padding: .75em 0 .2em 0;\n}\n\nmjx-mo {\n  display: inline-block;\n  text-align: left;\n}\n\nmjx-stretchy-h {\n  display: inline-table;\n  width: 100%;\n}\n\nmjx-stretchy-h > * {\n  display: table-cell;\n  width: 0;\n}\n\nmjx-stretchy-h > * > mjx-c {\n  display: inline-block;\n  transform: scalex(1.0000001);\n}\n\nmjx-stretchy-h > * > mjx-c::before {\n  display: inline-block;\n  width: initial;\n}\n\nmjx-stretchy-h > mjx-ext {\n  /* IE */ overflow: hidden;\n  /* others */ overflow: clip visible;\n  width: 100%;\n}\n\nmjx-stretchy-h > mjx-ext > mjx-c::before {\n  transform: scalex(500);\n}\n\nmjx-stretchy-h > mjx-ext > mjx-c {\n  width: 0;\n}\n\nmjx-stretchy-h > mjx-beg > mjx-c {\n  margin-right: -.1em;\n}\n\nmjx-stretchy-h > mjx-end > mjx-c {\n  margin-left: -.1em;\n}\n\nmjx-stretchy-v {\n  display: inline-block;\n}\n\nmjx-stretchy-v > * {\n  display: block;\n}\n\nmjx-stretchy-v > mjx-beg {\n  height: 0;\n}\n\nmjx-stretchy-v > mjx-end > mjx-c {\n  display: block;\n}\n\nmjx-stretchy-v > * > mjx-c {\n  transform: scaley(1.0000001);\n  transform-origin: left center;\n  overflow: hidden;\n}\n\nmjx-stretchy-v > mjx-ext {\n  display: block;\n  height: 100%;\n  box-sizing: border-box;\n  border: 0px solid transparent;\n  /* IE */ overflow: hidden;\n  /* others */ overflow: visible clip;\n}\n\nmjx-stretchy-v > mjx-ext > mjx-c::before {\n  width: initial;\n  box-sizing: border-box;\n}\n\nmjx-stretchy-v > mjx-ext > mjx-c {\n  transform: scaleY(500) translateY(.075em);\n  overflow: visible;\n}\n\nmjx-mark {\n  display: inline-block;\n  height: 0px;\n}\n\nmjx-mn {\n  display: inline-block;\n  text-align: left;\n}\n\nmjx-msup {\n  display: inline-block;\n  text-align: left;\n}\n\nmjx-c::before {\n  display: block;\n  width: 0;\n}\n\n.MJX-TEX {\n  font-family: MJXZERO, MJXTEX;\n}\n\n.TEX-B {\n  font-family: MJXZERO, MJXTEX-B;\n}\n\n.TEX-I {\n  font-family: MJXZERO, MJXTEX-I;\n}\n\n.TEX-MI {\n  font-family: MJXZERO, MJXTEX-MI;\n}\n\n.TEX-BI {\n  font-family: MJXZERO, MJXTEX-BI;\n}\n\n.TEX-S1 {\n  font-family: MJXZERO, MJXTEX-S1;\n}\n\n.TEX-S2 {\n  font-family: MJXZERO, MJXTEX-S2;\n}\n\n.TEX-S3 {\n  font-family: MJXZERO, MJXTEX-S3;\n}\n\n.TEX-S4 {\n  font-family: MJXZERO, MJXTEX-S4;\n}\n\n.TEX-A {\n  font-family: MJXZERO, MJXTEX-A;\n}\n\n.TEX-C {\n  font-family: MJXZERO, MJXTEX-C;\n}\n\n.TEX-CB {\n  font-family: MJXZERO, MJXTEX-CB;\n}\n\n.TEX-FR {\n  font-family: MJXZERO, MJXTEX-FR;\n}\n\n.TEX-FRB {\n  font-family: MJXZERO, MJXTEX-FRB;\n}\n\n.TEX-SS {\n  font-family: MJXZERO, MJXTEX-SS;\n}\n\n.TEX-SSB {\n  font-family: MJXZERO, MJXTEX-SSB;\n}\n\n.TEX-SSI {\n  font-family: MJXZERO, MJXTEX-SSI;\n}\n\n.TEX-SC {\n  font-family: MJXZERO, MJXTEX-SC;\n}\n\n.TEX-T {\n  font-family: MJXZERO, MJXTEX-T;\n}\n\n.TEX-V {\n  font-family: MJXZERO, MJXTEX-V;\n}\n\n.TEX-VB {\n  font-family: MJXZERO, MJXTEX-VB;\n}\n\nmjx-stretchy-v mjx-c, mjx-stretchy-h mjx-c {\n  font-family: MJXZERO, MJXTEX-S1, MJXTEX-S4, MJXTEX, MJXTEX-A ! important;\n}\n\n@font-face /* 0 */ {\n  font-family: MJXZERO;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Zero.woff\") format(\"woff\");\n}\n\n@font-face /* 1 */ {\n  font-family: MJXTEX;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 2 */ {\n  font-family: MJXTEX-B;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Main-Bold.woff\") format(\"woff\");\n}\n\n@font-face /* 3 */ {\n  font-family: MJXTEX-I;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff\") format(\"woff\");\n}\n\n@font-face /* 4 */ {\n  font-family: MJXTEX-MI;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Main-Italic.woff\") format(\"woff\");\n}\n\n@font-face /* 5 */ {\n  font-family: MJXTEX-BI;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Math-BoldItalic.woff\") format(\"woff\");\n}\n\n@font-face /* 6 */ {\n  font-family: MJXTEX-S1;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 7 */ {\n  font-family: MJXTEX-S2;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Size2-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 8 */ {\n  font-family: MJXTEX-S3;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Size3-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 9 */ {\n  font-family: MJXTEX-S4;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Size4-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 10 */ {\n  font-family: MJXTEX-A;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_AMS-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 11 */ {\n  font-family: MJXTEX-C;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 12 */ {\n  font-family: MJXTEX-CB;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Bold.woff\") format(\"woff\");\n}\n\n@font-face /* 13 */ {\n  font-family: MJXTEX-FR;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 14 */ {\n  font-family: MJXTEX-FRB;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Bold.woff\") format(\"woff\");\n}\n\n@font-face /* 15 */ {\n  font-family: MJXTEX-SS;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 16 */ {\n  font-family: MJXTEX-SSB;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Bold.woff\") format(\"woff\");\n}\n\n@font-face /* 17 */ {\n  font-family: MJXTEX-SSI;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Italic.woff\") format(\"woff\");\n}\n\n@font-face /* 18 */ {\n  font-family: MJXTEX-SC;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Script-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 19 */ {\n  font-family: MJXTEX-T;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Typewriter-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 20 */ {\n  font-family: MJXTEX-V;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 21 */ {\n  font-family: MJXTEX-VB;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Bold.woff\") format(\"woff\");\n}\n\nmjx-c.mjx-c1D45B.TEX-I::before {\n  padding: 0.442em 0.6em 0.011em 0;\n  content: \"n\";\n}\n\nmjx-c.mjx-c28::before {\n  padding: 0.75em 0.389em 0.25em 0;\n  content: \"(\";\n}\n\nmjx-c.mjx-c31::before {\n  padding: 0.666em 0.5em 0 0;\n  content: \"1\";\n}\n\nmjx-c.mjx-c2264::before {\n  padding: 0.636em 0.778em 0.138em 0;\n  content: \"\\2264\";\n}\n\nmjx-c.mjx-c30::before {\n  padding: 0.666em 0.5em 0.022em 0;\n  content: \"0\";\n}\n\nmjx-c.mjx-c35::before {\n  padding: 0.666em 0.5em 0.022em 0;\n  content: \"5\";\n}\n\nmjx-c.mjx-c29::before {\n  padding: 0.75em 0.389em 0.25em 0;\n  content: \")\";\n}\n\nmjx-c.mjx-c1D45A.TEX-I::before {\n  padding: 0.442em 0.878em 0.011em 0;\n  content: \"m\";\n}\n\nmjx-c.mjx-c32::before {\n  padding: 0.666em 0.5em 0 0;\n  content: \"2\";\n}\n\nmjx-c.mjx-cD7::before {\n  padding: 0.491em 0.778em 0 0;\n  content: \"\\D7\";\n}\n\nmjx-c.mjx-c1D460.TEX-I::before {\n  padding: 0.442em 0.469em 0.01em 0;\n  content: \"s\";\n}\n"}]}],"data":{"quirksMode":false}},"headings":[{"value":"关于 Python<a className=\"anchor\" id=\"关于-python\"></a>","depth":2,"id":null},{"value":"Python 的优点<a className=\"anchor\" id=\"python-的优点\"></a>","depth":3,"id":null},{"value":"学习 Python 的注意事项<a className=\"anchor\" id=\"学习-python-的注意事项\"></a>","depth":3,"id":null},{"value":"环境搭建<a className=\"anchor\" id=\"环境搭建\"></a>","depth":2,"id":null},{"value":"Windows<a className=\"anchor\" id=\"windows\"></a>","depth":3,"id":null},{"value":"macOS/Linux<a className=\"anchor\" id=\"macoslinux\"></a>","depth":3,"id":null},{"value":"通过镜像下载安装文件<a className=\"anchor\" id=\"通过镜像下载安装文件\"></a>","depth":3,"id":null},{"value":"使用 pip 安装第三方库<a className=\"anchor\" id=\"使用-pip-安装第三方库\"></a>","depth":2,"id":null},{"value":"基本语法<a className=\"anchor\" id=\"基本语法\"></a>","depth":2,"id":null},{"value":"注释<a className=\"anchor\" id=\"注释\"></a>","depth":3,"id":null},{"value":"基本数据类型<a className=\"anchor\" id=\"基本数据类型\"></a>","depth":3,"id":null},{"value":"一切皆对象<a className=\"anchor\" id=\"一切皆对象\"></a>","depth":4,"id":null},{"value":"数字运算<a className=\"anchor\" id=\"数字运算\"></a>","depth":4,"id":null},{"value":"数据类型判断<a className=\"anchor\" id=\"数据类型判断\"></a>","depth":4,"id":null},{"value":"输出和输入<a className=\"anchor\" id=\"输出和输入\"></a>","depth":3,"id":null},{"value":"输出<a className=\"anchor\" id=\"输出\"></a>","depth":4,"id":null},{"value":"字符串<a className=\"anchor\" id=\"字符串\"></a>","depth":4,"id":null},{"value":"开数组<a className=\"anchor\" id=\"开数组\"></a>","depth":3,"id":null},{"value":"使用 list<a className=\"anchor\" id=\"使用-list\"></a>","depth":4,"id":null},{"value":"使用 NumPy<a className=\"anchor\" id=\"使用-numpy\"></a>","depth":4,"id":null},{"value":"使用 array<a className=\"anchor\" id=\"使用-array\"></a>","depth":4,"id":null},{"value":"输入输出<a className=\"anchor\" id=\"输入输出\"></a>","depth":3,"id":null},{"value":"控制流程<a className=\"anchor\" id=\"控制流程\"></a>","depth":3,"id":null},{"value":"循环结构<a className=\"anchor\" id=\"循环结构\"></a>","depth":4,"id":null},{"value":"选择结构<a className=\"anchor\" id=\"选择结构\"></a>","depth":4,"id":null},{"value":"异常处理<a className=\"anchor\" id=\"异常处理\"></a>","depth":4,"id":null},{"value":"文件读写<a className=\"anchor\" id=\"文件读写\"></a>","depth":4,"id":null},{"value":"内置容器<a className=\"anchor\" id=\"内置容器\"></a>","depth":3,"id":null},{"value":"编写函数<a className=\"anchor\" id=\"编写函数\"></a>","depth":3,"id":null},{"value":"默认参数<a className=\"anchor\" id=\"默认参数\"></a>","depth":4,"id":null},{"value":"类型标注<a className=\"anchor\" id=\"类型标注\"></a>","depth":4,"id":null},{"value":"装饰器<a className=\"anchor\" id=\"装饰器\"></a>","depth":2,"id":null},{"value":"常用内置库<a className=\"anchor\" id=\"常用内置库\"></a>","depth":2,"id":null},{"value":"从例题对比 C++ 与 Python<a className=\"anchor\" id=\"从例题对比-c-与-python\"></a>","depth":2,"id":null},{"value":"声明常量<a className=\"anchor\" id=\"声明常量\"></a>","depth":3,"id":null},{"value":"声明前向星结构体和其它变量<a className=\"anchor\" id=\"声明前向星结构体和其它变量\"></a>","depth":3,"id":null},{"value":"Dijkstra 算法<a className=\"anchor\" id=\"dijkstra-算法\"></a>","depth":3,"id":null},{"value":"主函数<a className=\"anchor\" id=\"主函数\"></a>","depth":3,"id":null},{"value":"完整代码<a className=\"anchor\" id=\"完整代码\"></a>","depth":3,"id":null},{"value":"参考文档<a className=\"anchor\" id=\"参考文档\"></a>","depth":2,"id":null},{"value":"参考资料和注释<a className=\"anchor\" id=\"参考资料和注释\"></a>","depth":2,"id":null}],"frontmatter":{"author":"Tifa, tLLWtG, 墨笙_Mooos, F1shAndCat, chinggg, Jacob, yusancky, 不依君, Early, rewine, shenyouran, Ir1d, abc1763613206, zzjjbb, billchenchina, Dong, mgt, Coelacanthus, ksyx, zyouxam, Shuhao, Suyun514, N!no, Henry-ZHR, Henry-ZHR, ranwen, ranwen, Margatroid, sshwy","tags":["lang"],"title":"Python 速成","noMeta":null,"noComment":null,"description":null},"parent":{"relativePath":"lang/python.md","modifiedTime":"2023/02/03","birthTime":"2023-02-03T16:29:10.786Z","changeTime":"2023-02-03T16:29:10.786Z"}}},"pageContext":{"id":"6af55930-82c9-589e-a073-915d7285db21","lastModified":"2023-01-04T12:39:27+08:00","next":{"node":{"fields":{"slug":"/topic/rmq/"},"id":"5c7f7356-d70d-5e1a-aa78-f71e06783c3f","frontmatter":{"tags":["topic"],"title":"RMQ"},"fileAbsolutePath":"/home/runner/work/oiwiki-bootstrap/oiwiki-bootstrap/cauldron/docs/topic/rmq.md"}}}},
    "staticQueryHashes": ["2462162885","2862490856","3656965534"]}