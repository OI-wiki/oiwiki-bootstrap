{
    "componentChunkName": "component---node-modules-gatsby-theme-oi-wiki-src-templates-doc-js",
    "path": "/lang/lambda/",
    "result": {"data":{"mdx":{"id":"06ce1f10-9211-5f8c-99e9-4e4d9a2b2710","wordCount":{"words":268},"fields":{"slug":"/lang/lambda/","isIndex":false},"excerpt":"注意：考虑到算法竞赛的实际情况，本文将不会全面研究语法，只会讲述在算法竞赛中可能会应用到的部分。 本文语法参照 C++11 标准。语义不同的将以 C++11 作为标准，C++14、C++17 的语法视情况提及并会特别标注。 Lambda 表达式 Lambda…","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"注意"}]},{"type":"text","value":"：考虑到算法竞赛的实际情况，本文将不会全面研究语法，只会讲述在算法竞赛中可能会应用到的部分。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本文语法参照 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"C++11"}]},{"type":"text","value":" 标准。语义不同的将以 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"C++11"}]},{"type":"text","value":" 作为标准，C++14、C++17 的语法视情况提及并会特别标注。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Lambda 表达式"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"lambda-表达式"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F","ariaLabel":"lambda 表达式 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lambda 表达式因数学中的 "},{"type":"element","tagName":"span","properties":{"className":["math","math-inline"]},"children":[{"type":"element","tagName":"mjx-container","properties":{"className":["MathJax"],"jax":"CHTML"},"children":[{"type":"element","tagName":"mjx-math","properties":{"className":["MJX-TEX"]},"children":[{"type":"element","tagName":"mjx-mi","properties":{"className":["mjx-i"]},"children":[{"type":"element","tagName":"mjx-c","properties":{"className":["mjx-c1D706","TEX-I"]},"children":[]}]}]}]}]},{"type":"text","value":" 演算得名，直接对应于其中的 lambda 抽象。Lambda 表达式能够捕获作用域中的变量的无名函数对象。我们可以将其理解为一个匿名的内联函数，可以用来替换独立函数或者函数对象，从而使代码更可读。但是从本质上来讲，Lambda 表达式只是一种语法糖，因为它能完成的工作也可以用其他复杂的 C++ 语法来实现。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面是 Lambda 表达式的语法："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"codeblock","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["shiki"],"style":"background-color: var(--shiki-color-background);"},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"[capture] (parameters) mutable -> return-type {statement}"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面我们分别对其中的 capture, parameters, mutable, return-type, statement 进行介绍。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"capture 捕获子句"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"capture-捕获子句"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#capture-%E6%8D%95%E8%8E%B7%E5%AD%90%E5%8F%A5","ariaLabel":"capture 捕获子句 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lambda 表达式以 capture 子句开头，它指定哪些变量被捕获，以及捕获是通过值还是引用：有 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"&"}]},{"type":"text","value":" 符号前缀的变量通过引用访问，没有该前缀的变量通过值访问。空的 capture 子句 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[]"}]},{"type":"text","value":" 指示 Lambda 表达式的主体不访问封闭范围中的变量。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们也可以使用默认捕获模式："},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"&"}]},{"type":"text","value":" 表示捕获到的所有变量都通过引用访问，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"="}]},{"type":"text","value":" 表示捕获到的所有变量都通过值访问。之后我们可以为特定的变量 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"显式"}]},{"type":"text","value":" 指定相反的模式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如 Lambda 体要通过引用访问外部变量 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" 并通过值访问外部变量 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"b"}]},{"type":"text","value":"，则以下子句等效："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[&a, b]"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[b, &a]"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[&, b]"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[b, &]"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[=, &a]"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"默认捕获时，会捕获 Lambda 中提及的变量。获的变量成为 Lambda 的一部分；与函数参数相比，调用 Lambda 时不必传递它们。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以下是一些常见的例子："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"parameters 参数列表"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"parameters-参数列表"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#parameters-%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8","ariaLabel":"parameters 参数列表 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"大多数情况下类似于函数的参数列表，例如："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"C++14"}]},{"type":"text","value":" 中，若参数类型是泛型，则可以使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"auto"}]},{"type":"text","value":" 声明类型："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个例子："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这将打印出 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" 数组从大到小排序后的结果。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"parameters 参数列表"}]},{"type":"text","value":" 是可选的，如果不将参数传递给 Lambda 表达式，并且其 Lambda 声明器不包含 mutable，且没有后置返回值类型，则可以省略空括号。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lambda 表达式也可以将另一个 Lambda 表达式作为其参数。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个例子："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"mutable 可变规范"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"mutable-可变规范"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#mutable-%E5%8F%AF%E5%8F%98%E8%A7%84%E8%8C%83","ariaLabel":"mutable 可变规范 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"利用可变规范，Lambda 表达式的主体可以修改通过值捕获的变量。若使用此关键字，则 parameters "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"不可省略"}]},{"type":"text","value":"（即使为空）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个例子，使用 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"capture 捕获字句"}]},{"type":"text","value":" 中的例子，来观察 a 的值的变化："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此时 lambda 中的 a 的值改变为 1，lambda 外的 a 保持不变。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"return-type 返回类型"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"return-type-返回类型"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#return-type-%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B","ariaLabel":"return type 返回类型 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"用于指定 Lambda 表达式的返回类型。若没有指定返回类型，则返回类型将被自动推断（行为与用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"auto"}]},{"type":"text","value":" 声明返回值的普通函数一致）。具体的，如果函数体中没有 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" 语句，返回类型将被推导为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"void"}]},{"type":"text","value":"，否则根据返回值推导。若有多个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" 语句且返回值类型不同，将产生编译错误。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如，上文的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"lam"}]},{"type":"text","value":" 也可以写作："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"再举两个例子："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"statement Lambda 主体"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"statement-lambda-主体"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#statement-lambda-%E4%B8%BB%E4%BD%93","ariaLabel":"statement lambda 主体 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lambda 主体可包含任何函数可包含的部分。普通函数和 Lambda 表达式主体均可访问以下变量类型："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"从封闭范围捕获变量"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"参数"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"本地声明的变量"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在一个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" 中声明时，若捕获 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}]},{"type":"text","value":"，则可以访问该对象的成员"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"具有静态存储时间的任何变量，如全局变量"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面是一个例子"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"最后我们得到输出 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"5 0"}]},{"type":"text","value":"。这是由于 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" 是通过值捕获的，在调用 Lambda 表达式后仍保持原来的值 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" 不变。"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mutable"}]},{"type":"text","value":" 规范允许 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" 在 Lambda 主体中被修改，将 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mutable"}]},{"type":"text","value":" 删去则编译不通过。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"使用类完成更复杂的操作"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"使用类完成更复杂的操作"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%AE%8C%E6%88%90%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84%E6%93%8D%E4%BD%9C","ariaLabel":"使用类完成更复杂的操作 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 C++11 前没有 Lambda 表达式，但可以使用稍复杂的方法替代，尽管看上去更复杂却更易理解及扩展。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"首先我们已经知道 Lambda 本质是一个可调用的对象，那么直接定义一个类并构造一个对象，重载其 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"operator()"}]},{"type":"text","value":" 运算符就可以完成和 Lambda 一样的操作，下面看一个简单的例子，我们将使用 C++17 的语法："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在写 Lambda 表达式时，我们几乎都可以将其等价的映射为上面这种形式。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"element","tagName":"thead","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"th","properties":{"align":"left"},"children":[{"type":"text","value":"Lambda 表达式相关语法"}]},{"type":"element","tagName":"th","properties":{"align":"left"},"children":[{"type":"text","value":"类的语法"}]}]}]},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"capture 捕获子句"}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"构造函数"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"-"}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"析构函数"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"std::function"}]},{"type":"text","value":" 包装传递"}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"基类指针/引用传递"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"拷贝多个 Lambda 的函数对象"}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"text","value":"自定义的拷贝函数"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mutable"}]}]},{"type":"element","tagName":"td","properties":{"align":"left"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"operator()"}]},{"type":"text","value":" 函数是否为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 Lambda 的捕获子句中分为引用捕获和按值捕获（暂不考虑比较特殊的捕获 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" 等），而在类的构造函数中我们可以更精细的控制这一点，另外自定义的析构函数的存在也方便我们更好的扩展，缺点是不够「匿名」，因为仍需要类名。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"假设我们有一个函数"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么上述用例中就可以改为"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"并且既然 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Callable"}]},{"type":"text","value":" 是一个可调用对象，我们也可以通过 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"std::bind(&AbstractCallable::operator(), t, std::placeholders::_1)"}]},{"type":"text","value":" 来将其转换再转换为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"std::function<int(int)>"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果不需要实现类似 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"std::function"}]},{"type":"text","value":" 的包装，那么也无需使用抽象基类，这样便和一般的 Lambda 表达式一样不会产生额外的虚拟函数表的开销。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"参考文献"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"参考文献"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE","ariaLabel":"参考文献 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://en.cppreference.com/w/cpp/language/lambda"},"children":[{"type":"text","value":"https://en.cppreference.com/w/cpp/language/lambda"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":".anchorLink.before{position:absolute;top:0;left:0;transform:translateX(-100%);padding-right:4px}.anchorLink.after{display:inline-block;padding-left:4px}h1 .anchorLink svg,h2 .anchorLink svg,h3 .anchorLink svg,h4 .anchorLink svg,h5 .anchorLink svg,h6 .anchorLink svg{visibility:hidden}h1 .anchorLink:focus svg,h1:hover .anchorLink svg,h2 .anchorLink:focus svg,h2:hover .anchorLink svg,h3 .anchorLink:focus svg,h3:hover .anchorLink svg,h4 .anchorLink:focus svg,h4:hover .anchorLink svg,h5 .anchorLink:focus svg,h5:hover .anchorLink svg,h6 .anchorLink:focus svg,h6:hover .anchorLink svg{visibility:visible}a.anchor{display:inline-block;position:relative;top:-159px;visibility:hidden}@media only screen and (max-width:1279.95px){a.anchor{top:-101px}}"}]},{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":"\nmjx-container[jax=\"CHTML\"] {\n  line-height: 0;\n}\n\nmjx-container [space=\"1\"] {\n  margin-left: .111em;\n}\n\nmjx-container [space=\"2\"] {\n  margin-left: .167em;\n}\n\nmjx-container [space=\"3\"] {\n  margin-left: .222em;\n}\n\nmjx-container [space=\"4\"] {\n  margin-left: .278em;\n}\n\nmjx-container [space=\"5\"] {\n  margin-left: .333em;\n}\n\nmjx-container [rspace=\"1\"] {\n  margin-right: .111em;\n}\n\nmjx-container [rspace=\"2\"] {\n  margin-right: .167em;\n}\n\nmjx-container [rspace=\"3\"] {\n  margin-right: .222em;\n}\n\nmjx-container [rspace=\"4\"] {\n  margin-right: .278em;\n}\n\nmjx-container [rspace=\"5\"] {\n  margin-right: .333em;\n}\n\nmjx-container [size=\"s\"] {\n  font-size: 70.7%;\n}\n\nmjx-container [size=\"ss\"] {\n  font-size: 50%;\n}\n\nmjx-container [size=\"Tn\"] {\n  font-size: 60%;\n}\n\nmjx-container [size=\"sm\"] {\n  font-size: 85%;\n}\n\nmjx-container [size=\"lg\"] {\n  font-size: 120%;\n}\n\nmjx-container [size=\"Lg\"] {\n  font-size: 144%;\n}\n\nmjx-container [size=\"LG\"] {\n  font-size: 173%;\n}\n\nmjx-container [size=\"hg\"] {\n  font-size: 207%;\n}\n\nmjx-container [size=\"HG\"] {\n  font-size: 249%;\n}\n\nmjx-container [width=\"full\"] {\n  width: 100%;\n}\n\nmjx-box {\n  display: inline-block;\n}\n\nmjx-block {\n  display: block;\n}\n\nmjx-itable {\n  display: inline-table;\n}\n\nmjx-row {\n  display: table-row;\n}\n\nmjx-row > * {\n  display: table-cell;\n}\n\nmjx-mtext {\n  display: inline-block;\n}\n\nmjx-mstyle {\n  display: inline-block;\n}\n\nmjx-merror {\n  display: inline-block;\n  color: red;\n  background-color: yellow;\n}\n\nmjx-mphantom {\n  visibility: hidden;\n}\n\n_::-webkit-full-page-media, _:future, :root mjx-container {\n  will-change: opacity;\n}\n\nmjx-math {\n  display: inline-block;\n  text-align: left;\n  line-height: 0;\n  text-indent: 0;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 100%;\n  font-size-adjust: none;\n  letter-spacing: normal;\n  border-collapse: collapse;\n  word-wrap: normal;\n  word-spacing: normal;\n  white-space: nowrap;\n  direction: ltr;\n  padding: 1px 0;\n}\n\nmjx-container[jax=\"CHTML\"][display=\"true\"] {\n  display: block;\n  text-align: center;\n  margin: 1em 0;\n}\n\nmjx-container[jax=\"CHTML\"][display=\"true\"][width=\"full\"] {\n  display: flex;\n}\n\nmjx-container[jax=\"CHTML\"][display=\"true\"] mjx-math {\n  padding: 0;\n}\n\nmjx-container[jax=\"CHTML\"][justify=\"left\"] {\n  text-align: left;\n}\n\nmjx-container[jax=\"CHTML\"][justify=\"right\"] {\n  text-align: right;\n}\n\nmjx-mi {\n  display: inline-block;\n  text-align: left;\n}\n\nmjx-c {\n  display: inline-block;\n}\n\nmjx-utext {\n  display: inline-block;\n  padding: .75em 0 .2em 0;\n}\n\nmjx-c::before {\n  display: block;\n  width: 0;\n}\n\n.MJX-TEX {\n  font-family: MJXZERO, MJXTEX;\n}\n\n.TEX-B {\n  font-family: MJXZERO, MJXTEX-B;\n}\n\n.TEX-I {\n  font-family: MJXZERO, MJXTEX-I;\n}\n\n.TEX-MI {\n  font-family: MJXZERO, MJXTEX-MI;\n}\n\n.TEX-BI {\n  font-family: MJXZERO, MJXTEX-BI;\n}\n\n.TEX-S1 {\n  font-family: MJXZERO, MJXTEX-S1;\n}\n\n.TEX-S2 {\n  font-family: MJXZERO, MJXTEX-S2;\n}\n\n.TEX-S3 {\n  font-family: MJXZERO, MJXTEX-S3;\n}\n\n.TEX-S4 {\n  font-family: MJXZERO, MJXTEX-S4;\n}\n\n.TEX-A {\n  font-family: MJXZERO, MJXTEX-A;\n}\n\n.TEX-C {\n  font-family: MJXZERO, MJXTEX-C;\n}\n\n.TEX-CB {\n  font-family: MJXZERO, MJXTEX-CB;\n}\n\n.TEX-FR {\n  font-family: MJXZERO, MJXTEX-FR;\n}\n\n.TEX-FRB {\n  font-family: MJXZERO, MJXTEX-FRB;\n}\n\n.TEX-SS {\n  font-family: MJXZERO, MJXTEX-SS;\n}\n\n.TEX-SSB {\n  font-family: MJXZERO, MJXTEX-SSB;\n}\n\n.TEX-SSI {\n  font-family: MJXZERO, MJXTEX-SSI;\n}\n\n.TEX-SC {\n  font-family: MJXZERO, MJXTEX-SC;\n}\n\n.TEX-T {\n  font-family: MJXZERO, MJXTEX-T;\n}\n\n.TEX-V {\n  font-family: MJXZERO, MJXTEX-V;\n}\n\n.TEX-VB {\n  font-family: MJXZERO, MJXTEX-VB;\n}\n\nmjx-stretchy-v mjx-c, mjx-stretchy-h mjx-c {\n  font-family: MJXZERO, MJXTEX-S1, MJXTEX-S4, MJXTEX, MJXTEX-A ! important;\n}\n\n@font-face /* 0 */ {\n  font-family: MJXZERO;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Zero.woff\") format(\"woff\");\n}\n\n@font-face /* 1 */ {\n  font-family: MJXTEX;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 2 */ {\n  font-family: MJXTEX-B;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Main-Bold.woff\") format(\"woff\");\n}\n\n@font-face /* 3 */ {\n  font-family: MJXTEX-I;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff\") format(\"woff\");\n}\n\n@font-face /* 4 */ {\n  font-family: MJXTEX-MI;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Main-Italic.woff\") format(\"woff\");\n}\n\n@font-face /* 5 */ {\n  font-family: MJXTEX-BI;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Math-BoldItalic.woff\") format(\"woff\");\n}\n\n@font-face /* 6 */ {\n  font-family: MJXTEX-S1;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 7 */ {\n  font-family: MJXTEX-S2;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Size2-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 8 */ {\n  font-family: MJXTEX-S3;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Size3-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 9 */ {\n  font-family: MJXTEX-S4;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Size4-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 10 */ {\n  font-family: MJXTEX-A;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_AMS-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 11 */ {\n  font-family: MJXTEX-C;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 12 */ {\n  font-family: MJXTEX-CB;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Bold.woff\") format(\"woff\");\n}\n\n@font-face /* 13 */ {\n  font-family: MJXTEX-FR;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 14 */ {\n  font-family: MJXTEX-FRB;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Bold.woff\") format(\"woff\");\n}\n\n@font-face /* 15 */ {\n  font-family: MJXTEX-SS;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 16 */ {\n  font-family: MJXTEX-SSB;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Bold.woff\") format(\"woff\");\n}\n\n@font-face /* 17 */ {\n  font-family: MJXTEX-SSI;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Italic.woff\") format(\"woff\");\n}\n\n@font-face /* 18 */ {\n  font-family: MJXTEX-SC;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Script-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 19 */ {\n  font-family: MJXTEX-T;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Typewriter-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 20 */ {\n  font-family: MJXTEX-V;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Regular.woff\") format(\"woff\");\n}\n\n@font-face /* 21 */ {\n  font-family: MJXTEX-VB;\n  src: url(\"https://cdn.jsdelivr.net/npm/mathjax@3.0.5/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Bold.woff\") format(\"woff\");\n}\n\nmjx-c.mjx-c1D706.TEX-I::before {\n  padding: 0.694em 0.583em 0.012em 0;\n  content: \"\\3BB\";\n}\n"}]}],"data":{"quirksMode":false}},"headings":[{"value":"Lambda 表达式<a className=\"anchor\" id=\"lambda-表达式\"></a>","depth":2,"id":null},{"value":"capture 捕获子句<a className=\"anchor\" id=\"capture-捕获子句\"></a>","depth":3,"id":null},{"value":"parameters 参数列表<a className=\"anchor\" id=\"parameters-参数列表\"></a>","depth":3,"id":null},{"value":"mutable 可变规范<a className=\"anchor\" id=\"mutable-可变规范\"></a>","depth":3,"id":null},{"value":"return-type 返回类型<a className=\"anchor\" id=\"return-type-返回类型\"></a>","depth":3,"id":null},{"value":"statement Lambda 主体<a className=\"anchor\" id=\"statement-lambda-主体\"></a>","depth":3,"id":null},{"value":"使用类完成更复杂的操作<a className=\"anchor\" id=\"使用类完成更复杂的操作\"></a>","depth":3,"id":null},{"value":"参考文献<a className=\"anchor\" id=\"参考文献\"></a>","depth":2,"id":null}],"frontmatter":{"author":"y, CoderOJ, queenwen","tags":["lang"],"title":"Lambda 表达式","noMeta":null,"noComment":null,"description":null},"parent":{"relativePath":"lang/lambda.md","modifiedTime":"2023/02/03","birthTime":"2023-02-03T16:29:10.794Z","changeTime":"2023-02-03T16:29:10.794Z"}}},"pageContext":{"id":"06ce1f10-9211-5f8c-99e9-4e4d9a2b2710","lastModified":"2022-08-28T17:46:15+08:00","next":{"node":{"fields":{"slug":"/ds/leafy-tree/"},"id":"09034c10-26ae-5abc-94eb-1e22fb9f1c68","frontmatter":{"tags":["ds"],"title":"Leafy Tree"},"fileAbsolutePath":"/home/runner/work/oiwiki-bootstrap/oiwiki-bootstrap/cauldron/docs/ds/leafy-tree.md"}}}},
    "staticQueryHashes": ["2462162885","2862490856","3656965534"]}