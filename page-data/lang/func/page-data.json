{
    "componentChunkName": "component---node-modules-gatsby-theme-oi-wiki-src-templates-doc-js",
    "path": "/lang/func/",
    "result": {"data":{"mdx":{"id":"fdb1baf4-e78b-5008-9f2d-d385cab1bd6c","wordCount":{"words":178},"fields":{"slug":"/lang/func/","isIndex":false},"excerpt":"函数的声明 编程中的函数（function）一般是若干语句的集合。我们也可以将其称作“子过程（subroutine…","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"函数的声明"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"函数的声明"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E","ariaLabel":"函数的声明 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"编程中的函数（function）一般是若干语句的集合。我们也可以将其称作“"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"子过程"}]},{"type":"text","value":"（subroutine）”。在编程中，如果有一些重复的过程，我们可以将其提取出来，形成一个函数。函数可以接收若干值，这叫做函数的参数。函数也可以返回某个值，这叫做函数的返回值。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"声明一个函数，我们需要返回值类型、函数的名称，以及参数列表。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如上图，我们声明了一个名为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"some_function"}]},{"type":"text","value":" 的函数，它需要接收两个 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" 类型的参数，返回值类型也为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int"}]},{"type":"text","value":"。可以认为，这个函数将会对传入的两个整数进行一些操作，并且返回一个同样类型的结果。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"实现函数：编写函数的定义"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"实现函数编写函数的定义"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E7%BC%96%E5%86%99%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89","ariaLabel":"实现函数编写函数的定义 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"只有函数的声明（declaration）还不够，他只能让我们在调用时能够得知函数的 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"接口"}]},{"type":"text","value":" 类型（即接收什么数据、返回什么数据），但其缺乏具体的内部实现，也就是函数的 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"定义"}]},{"type":"text","value":"（definition）。我们可以在 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"声明之后的其他地方"}]},{"type":"text","value":" 编写代码 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"实现"}]},{"type":"text","value":"（implement）这个函数（也可以在另外的文件中实现，但是需要将分别编译后的文件在链接时一并给出）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果函数有返回值，则需要通过 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" 语句，将值返回给调用方。函数一旦执行到 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" 语句，则直接结束当前函数，不再执行后续的语句。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在定义时，我们给函数的参数列表的变量起了名字。这样，我们便可以在函数定义中使用这些变量了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果是同一个文件中，我们也可以直接将 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"声明和定义合并在一起"}]},{"type":"text","value":"，换句话说，也就是在声明时就完成定义。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果函数不需要有返回值，则将函数的返回值类型标为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"void"}]},{"type":"text","value":"；如果函数不需要参数，则可以将参数列表置空。同样，无返回值的函数执行到 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return;"}]},{"type":"text","value":" 语句也会结束执行。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"函数的调用"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"函数的调用"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8","ariaLabel":"函数的调用 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"和变量一样，函数需要先被声明，才能使用。使用函数的行为，叫做“调用（call）”。我们可以在任何函数内部调用其他函数，包括这个函数自身。函数调用自身的行为，称为 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"递归"}]},{"type":"text","value":"（recursion）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在大多数语言中，调用函数的写法，是 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"函数名称加上一对括号"}]},{"type":"text","value":" "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"()"}]},{"type":"text","value":"，如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo()"}]},{"type":"text","value":"。如果函数需要参数，则我们将其需要的参数按顺序填写在括号中，以逗号间隔，如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo(1, 2)"}]},{"type":"text","value":"。函数的调用也是一个表达式，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"函数的返回值"}]},{"type":"text","value":" 就是 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"表达式的值"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"函数声明时候写出的参数，可以理解为在函数 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"当前次调用的内部"}]},{"type":"text","value":" 可以使用的变量，这些变量的值由调用处传入的值初始化。看下面这个例子："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在上面的例子中，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo(a, b)"}]},{"type":"text","value":" 是一次对 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo"}]},{"type":"text","value":" 的调用。调用时，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo"}]},{"type":"text","value":" 中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" 变量，分别由调用处 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" 的值初始化。因此，在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo"}]},{"type":"text","value":" 中对变量 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" 的修改，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"并不会影响到调用处的变量的值"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果我们需要在函数（子过程）中修改变量的值，则需要采用“传引用”的方式。"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上述代码中，我们看到函数参数列表中的“"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int"}]},{"type":"text","value":"”后面添加了一个“"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"&"}]},{"type":"text","value":"（and 符号）”，这表示对于 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" 类型的 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"引用"}]},{"type":"text","value":"（reference）。在调用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo"}]},{"type":"text","value":" 时，调用处 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" 变量分别初始化了 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo"}]},{"type":"text","value":" 中两个对 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" 类型的引用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"y"}]},{"type":"text","value":"。在 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo"}]},{"type":"text","value":" 中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"y"}]},{"type":"text","value":"，可以理解为调用处 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" 变量的“别名”，即 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"foo"}]},{"type":"text","value":" 中对 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" 的操作，就是对调用处 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" 和 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" 的操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"main"}]},{"type":"text","value":" 函数"},{"type":"element","tagName":"a","properties":{"className":["anchor"],"id":"main-函数"},"children":[]},{"type":"element","tagName":"a","properties":{"href":"#main-%E5%87%BD%E6%95%B0","ariaLabel":"main 函数 permalink","className":["anchorLink","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"特别的，每个 C/C++ 程序都需要有一个名为 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"main"}]},{"type":"text","value":" 的函数。任何程序都将从 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"main"}]},{"type":"text","value":" 函数开始运行。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"main"}]},{"type":"text","value":" 函数也可以有参数，通过 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"main"}]},{"type":"text","value":" 函数的参数，我们可以获得外界传给这个程序的指令（也就是“命令行参数”），以便做出不同的反应。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面是一段调用了函数（子过程）的代码："}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":".anchorLink.before{position:absolute;top:0;left:0;transform:translateX(-100%);padding-right:4px}.anchorLink.after{display:inline-block;padding-left:4px}h1 .anchorLink svg,h2 .anchorLink svg,h3 .anchorLink svg,h4 .anchorLink svg,h5 .anchorLink svg,h6 .anchorLink svg{visibility:hidden}h1 .anchorLink:focus svg,h1:hover .anchorLink svg,h2 .anchorLink:focus svg,h2:hover .anchorLink svg,h3 .anchorLink:focus svg,h3:hover .anchorLink svg,h4 .anchorLink:focus svg,h4:hover .anchorLink svg,h5 .anchorLink:focus svg,h5:hover .anchorLink svg,h6 .anchorLink:focus svg,h6:hover .anchorLink svg{visibility:visible}a.anchor{display:inline-block;position:relative;top:-159px;visibility:hidden}@media only screen and (max-width:1279.95px){a.anchor{top:-101px}}"}]}],"data":{"quirksMode":false}},"headings":[{"value":"函数的声明<a className=\"anchor\" id=\"函数的声明\"></a>","depth":2,"id":null},{"value":"实现函数：编写函数的定义<a className=\"anchor\" id=\"实现函数编写函数的定义\"></a>","depth":2,"id":null},{"value":"函数的调用<a className=\"anchor\" id=\"函数的调用\"></a>","depth":2,"id":null},{"value":"main 函数<a className=\"anchor\" id=\"main-函数\"></a>","depth":2,"id":null}],"frontmatter":{"author":"yang-lile, Danni, henry_23, Xeonacid","tags":["lang"],"title":"函数","noMeta":null,"noComment":null,"description":null},"parent":{"relativePath":"lang/func.md","modifiedTime":"2023/02/03","birthTime":"2023-02-03T16:29:10.786Z","changeTime":"2023-02-03T16:29:10.786Z"}}},"pageContext":{"id":"fdb1baf4-e78b-5008-9f2d-d385cab1bd6c","lastModified":"2022-11-25T12:52:27+08:00","next":{"node":{"fields":{"slug":"/ds/bit-in-block-array/"},"id":"fd3db11e-0173-5e46-8fa5-f9df7ba5c9e3","frontmatter":{"tags":["ds"],"title":"分块套树状数组"},"fileAbsolutePath":"/home/runner/work/oiwiki-bootstrap/oiwiki-bootstrap/cauldron/docs/ds/bit-in-block-array.md"}}}},
    "staticQueryHashes": ["2462162885","2862490856","3656965534"]}